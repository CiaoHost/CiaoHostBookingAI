
import streamlit as st
import google.generativeai as genai
import os
import json
import pandas as pd
from dotenv import load_dotenv
import time
import random
import matplotlib.pyplot as plt
import streamlit.components.v1 as components
from attached_assets.cleaning_management import (
    show_cleaning_calendar,
    show_cleaning_services,
    show_scheduling,
    show_automated_messages
)
# Note: The 'attached_assets.cleaning_management' module has dependencies
# on a 'utils' directory (e.g., 'utils.database') and potentially a 'data' subdirectory.
# Ensure these are correctly structured for the imports and file access to work.

# import attached_assets.dashboard_creator as dashboard_creator
# import attached_assets.dashboard_creator as dashboard_creator
# import attached_assets.data_insights as data_insights
import attached_assets.dynamic_pricing as dynamic_pricing
# import attached_assets.fiscal_management as fiscal_management
from attached_assets.property_management import show_property_management
# import attached_assets.report_builder as report_builder
import attached_assets.settings as settings

# Funzione per mostrare l'effetto coriandoli usando direttamente Streamlit
def show_confetti():
    """
    Mostra un effetto coriandoli semplice ma visibile usando direttamente Streamlit
    """
    # Salva lo stato per sapere se mostrare i coriandoli
    if 'show_confetti' not in st.session_state:
        st.session_state.show_confetti = True
    
    if st.session_state.show_confetti:
        # Crea un container per i coriandoli
        confetti_container = st.empty()
        
        # Genera coriandoli colorati (emoji)
        confetti_symbols = ["üéâ", "üéä", "‚ú®", "‚≠ê", "üåü", "üí´", "üéà", "üéá", "üéÜ", "ü•≥"]
        
        # Crea righe di coriandoli con emoji
        for _ in range(5):  # 5 righe di coriandoli
            row = ""
            for _ in range(15):  # 15 emoji per riga
                row += confetti_symbols[int(random.random() * len(confetti_symbols))] + " "
            confetti_container.markdown(f"<h1 style='text-align: center; line-height: 1;'>{row}</h1>", unsafe_allow_html=True)
        
        # Mostra un messaggio di congratulazioni
        st.balloons()  # Usa anche l'effetto palloncini integrato di Streamlit
        st.success("üéâ Congratulazioni! Abbonamento attivato con successo! üéâ")
        
        # Disattiva i coriandoli dopo averli mostrati una volta
        st.session_state.show_confetti = False

# Sezione per mostrare il logo aziendale
def show_company_logo(size="medium", with_text=True):
    """
    Mostra il logo aziendale con dimensioni personalizzabili
    
    Parametri:
    - size: "small" (80px), "medium" (150px), "large" (200px)
    - with_text: se True, mostra anche il testo "CiaoHost" accanto al logo
    """
    # Dimensioni del logo in base al parametro size
    sizes = {
        "small": 80,
        "medium": 150,
        "large": 200
    }
    width = sizes.get(size, 150)  # Default a medium se size non √® valido
    
    # Percorso del logo
    logo_path = "logo.png"
    
    # Verifica se il file esiste
    if os.path.exists(logo_path):
        # Usa il logo reale
        if with_text:
            cols = st.columns([1, 3])
            with cols[0]:
                st.image(logo_path, width=width)
            with cols[1]:
                st.markdown(f"""
                <h1 style="color: #4361ee; font-size: {int(width/3)}px; margin-top: {int(width/4)}px;">CiaoHost</h1>
                """, unsafe_allow_html=True)
        else:
            st.image(logo_path, width=width)
    else:
        # Fallback al logo generato con CSS
        if with_text:
            cols = st.columns([1, 3])
            with cols[0]:
                st.markdown(f"""
                <div style="background-color: #4361ee; color: white; width: {width}px; height: {width}px; 
                            border-radius: 50%; display: flex; align-items: center; justify-content: center; 
                            margin: 0 auto; text-align: center; line-height: {width}px; font-weight: bold; 
                            font-size: {int(width/3)}px;">
                    CH
                </div>
                """, unsafe_allow_html=True)
            with cols[1]:
                st.markdown(f"""
                <h1 style="color: #4361ee; font-size: {int(width/3)}px; margin-top: {int(width/4)}px;">CiaoHost</h1>
                """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div style="background-color: #4361ee; color: white; width: {width}px; height: {width}px; 
                        border-radius: 50%; display: flex; align-items: center; justify-content: center; 
                        margin: 0 auto; text-align: center; line-height: {width}px; font-weight: bold; 
                        font-size: {int(width/3)}px;">
                CH
            </div>
            """, unsafe_allow_html=True)

# Puoi chiamare show_company_logo() dove preferisci nel layout, ad esempio subito dopo l'inizio di main()

API_KEY = "AIzaSyB-Lgs26JGbdxdJFVk1-1JQFd2lUfyFXwM"

try:
    genai.configure(api_key=API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
except Exception as e:
    st.error(f"Errore durante la configurazione di Gemini: {e}")
    model = None

CONTESTO_IMMOBILIARE = """
Sei un esperto di gestione immobiliare dell'azienda chiamata CiaoHost, devi offrire supporto ai clienti e hai queste capacit√†:
1. Analizzare dati di mercato e generare report
2. Creare contratti d'affitto/vendita personalizzati
3. Calcolare ROI, Tasso Capitalizzazione e metriche finanziarie
4. Generare descrizioni accattivanti per annunci immobiliari
5. Rispondere a domande tecniche su normative e pratiche notarili
in caso ti domandino chi sei o cosa fai rispondi in modo intelligente, da ora in poi sei CiaoHost AI e se stato costruito da CiaoHost,
devi simulare il tutto. ma non devi sempre ribadire chi sei, solo in caso te lo chiedono. in piu se ti do un immobile devi dirmi se e disponibile o meno e non devi assolutamente dire l'id dell immobile.,

Formatta le risposte con:
- Liste puntate per i concetti chiave
- Tabelle comparative quando utile
- Evidenziazione termini tecnici (es. *cap rate*)
"""

DB_FILE = "DatabaseCiaoHostProprieta.json"
ADMIN_CREDENTIALS = {"username": "admin", "password": "root"}

if 'messages' not in st.session_state:
    st.session_state.messages = []
if 'properties' not in st.session_state:
    st.session_state.properties = {}
if 'users' not in st.session_state:
    st.session_state.users = {}
if 'user_states' not in st.session_state:
    st.session_state.user_states = {}
if 'current_page' not in st.session_state:
    st.session_state.current_page = 'login'
if 'is_authenticated' not in st.session_state:
    st.session_state.is_authenticated = False
if 'current_user_email' not in st.session_state:
    st.session_state.current_user_email = None
if 'admin_state' not in st.session_state:
    st.session_state.admin_state = {'mode': None, 'step': None}
if 'data' not in st.session_state:
    st.session_state.data = None
if 'dashboard_panels' not in st.session_state:
    st.session_state.dashboard_panels = []
if 'saved_dashboards' not in st.session_state:
    st.session_state.saved_dashboards = {}
if 'subscription_purchased' not in st.session_state:
    st.session_state.subscription_purchased = False

from utils.json_database import load_database as load_json_db, save_database as save_json_db, get_all_properties

def load_database():
    try:
        data = load_json_db()
        st.session_state.properties = data.get('properties', {})
        st.session_state.users = data.get('users', {})
    except Exception as e:
        st.error(f"Errore durante il caricamento del database: {e}")
        st.session_state.properties = {}
        st.session_state.users = {}
        save_database()

def save_database():
    try:
        save_json_db({
            'properties': st.session_state.properties,
            'users': st.session_state.users
        })
    except Exception as e:
        st.error(f"Errore durante il salvataggio del database: {e}")

def handle_admin_access(message_text):
    admin_state = st.session_state.admin_state

    if message_text.lower().strip() == "/admin":
        admin_state['mode'] = 'auth'
        admin_state['step'] = 'username'
        return "üë§ Inserisci username admin:"

    if admin_state.get('mode') == 'auth':
        if admin_state.get('step') == 'username':
            if message_text == ADMIN_CREDENTIALS['username']:
                admin_state['step'] = 'password'
                return "üîë Inserisci password:"
            else:
                admin_state['mode'] = None
                admin_state['step'] = None
                return "‚ùå Username errato! Riprova con /admin."

        elif admin_state.get('step') == 'password':
            if message_text == ADMIN_CREDENTIALS['password']:
                admin_state['mode'] = 'active'
                admin_state['step'] = None
                return """üîì Accesso admin consentito!
Comandi disponibili:
  ‚Ä¢ /add_property <nome> <tipo> <prezzo> <localit√†> <telefono> <servizi_comma_separated>
    Esempio: /add_property "Villa Sole" B&B 120 Roma +390123456 "WiFi,Piscina"
  ‚Ä¢ /list_properties
  ‚Ä¢ /list_users
  ‚Ä¢ /delete_property <id>
  ‚Ä¢ /exit_admin (per uscire dalla modalit√† admin)"""
            else:
                admin_state['mode'] = None
                admin_state['step'] = None
                return "‚ùå Password errata! Riprova con /admin."

    if admin_state.get('mode') == 'active':
        cmd_parts = message_text.lower().strip().split(maxsplit=1)
        command = cmd_parts[0]

        if command == "/add_property":
            try:
                # Nuovo formato che supporta spazi nel nome della propriet√†
                # Formato: /add_property "Nome Propriet√†" Tipo Prezzo Localit√† Telefono "Servizi1,Servizi2"
                command_pattern = r'/add_property\s+"([^"]+)"\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(.+)'
                import re
                match = re.match(command_pattern, message_text.strip())
                
                if not match:
                    return """‚ùå Formato errato. Usa: 
/add_property "Nome Propriet√†" Tipo Prezzo Localit√† Telefono "Servizi1,Servizi2"

Esempio: /add_property "Villa Bella" B&B 120 Roma +390123456 "WiFi,Piscina"
                    
Nota: Il nome della propriet√† deve essere tra virgolette."""
                
                name, prop_type, price_str, location, phone, services_str = match.groups()
                
                try:
                    price_value = float(price_str.replace('‚Ç¨', '').replace(',', '.').strip())
                except ValueError:
                    return "‚ùå Errore: Il prezzo deve essere un numero valido (es. 150.50)."
                
                # Rimuovi le virgolette dai servizi se presenti
                services_str = services_str.strip('"')

                prop_id = str(len(st.session_state.properties) + 1)
                while prop_id in st.session_state.properties:
                    prop_id = str(int(prop_id) + 1)

                st.session_state.properties[prop_id] = {
                    "name": name, "type": prop_type, "price": price_value,
                    "location": location, "phone": phone,
                    "services": [s.strip() for s in services_str.split(',')],
                    "status": "disponibile"
                }
                save_database()
                return f"‚úÖ Propriet√† '{name}' aggiunta con ID {prop_id}."
            except Exception as e:
                return f"‚ùå Errore durante l'aggiunta: {str(e)}"

        elif command == "/list_properties":
            if not st.session_state.properties:
                return "‚ÑπÔ∏è Nessuna propriet√† nel database."
            
            prop_list_str = "Elenco Propriet√†:\n"
            for pid, prop in st.session_state.properties.items():
                prop_list_str += (f"  ‚Ä¢ ID {pid}: {prop.get('name', 'N/A')} ({prop.get('type', 'N/A')}) "
                                  f"a {prop.get('location', 'N/A')} - ‚Ç¨{prop.get('price', 0):,.2f} "
                                  f"- Status: {prop.get('status', 'N/A')}\n")
            return prop_list_str
            
        elif command == "/list_users":
            if not st.session_state.users:
                return "‚ÑπÔ∏è Nessun utente registrato nel database."
            
            user_list_str = "Elenco Utenti Registrati:\n"
            for email, password in st.session_state.users.items():
                user_list_str += f"  ‚Ä¢ Email: {email} - Password: {password}\n"
            return user_list_str

        elif command == "/delete_property":
            try:
                if len(cmd_parts) < 2 or not cmd_parts[1]:
                     return "‚ùå Formato corretto: /delete_property <id>"
                prop_id_to_delete = cmd_parts[1].strip()
                
                if prop_id_to_delete in st.session_state.properties:
                    deleted_prop_name = st.session_state.properties[prop_id_to_delete].get('name', 'Sconosciuta')
                    del st.session_state.properties[prop_id_to_delete]
                    save_database()
                    return f"‚úÖ Immobile '{deleted_prop_name}' (ID: {prop_id_to_delete}) eliminato!"
                return f"‚ùå Immobile con ID {prop_id_to_delete} non trovato."
            except Exception as e:
                return f"‚ùå Errore durante l'eliminazione: {str(e)}"
        
        elif command == "/exit_admin":
            admin_state['mode'] = None
            admin_state['step'] = None
            return "üö™ Modalit√† admin disattivata."
        
        elif message_text.startswith("/"):
            return "‚ùì Comando admin non riconosciuto. Comandi validi: /add_property, /list_properties, /list_users, /delete_property, /exit_admin."

    return None

def show_property_search():
    st.markdown("""
        <h1 style="font-size: 2.2rem; font-weight: 700; margin-bottom: 1rem;">
            <span style="color: #4361ee;">üîç</span> Ricerca Immobili
        </h1>
        <p style="font-size: 1.1rem; color: #6c757d; margin-bottom: 2rem;">
            Trova la propriet√† perfetta per le tue esigenze
        </p>
    """, unsafe_allow_html=True)
    
    properties = st.session_state.get('properties', {})

    if not properties:
        st.markdown("""
            <div style="background-color: white; padding: 2rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); text-align: center; margin: 2rem 0;">
                <img src="https://cdn-icons-png.flaticon.com/512/6134/6134065.png" style="width: 100px; margin-bottom: 1rem;">
                <h3 style="font-size: 1.5rem; margin-bottom: 1rem;">Nessun immobile disponibile</h3>
                <p style="color: #6c757d;">Al momento non ci sono immobili nel database. Riprova pi√π tardi.</p>
            </div>
        """, unsafe_allow_html=True)
        return

    available_properties = {pid: prop for pid, prop in properties.items() if prop.get("status") == "disponibile"}

    if not available_properties:
        st.markdown("""
            <div style="background-color: white; padding: 2rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); text-align: center; margin: 2rem 0;">
                <img src="https://cdn-icons-png.flaticon.com/512/6134/6134065.png" style="width: 100px; margin-bottom: 1rem;">
                <h3 style="font-size: 1.5rem; margin-bottom: 1rem;">Nessun immobile disponibile</h3>
                <p style="color: #6c757d;">Al momento non ci sono immobili disponibili. Riprova pi√π tardi.</p>
            </div>
        """, unsafe_allow_html=True)
        return

    # Advanced search filters
    st.markdown("""
        <div style="background-color: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); margin-bottom: 2rem;">
            <h3 style="font-size: 1.2rem; margin-bottom: 1rem;">Filtri di Ricerca</h3>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        search_term = st.text_input("üîç Cerca", placeholder="Nome, tipo o localit√†...", key="prop_search_term").lower()
    
    with col2:
        # Extract unique property types
        property_types = list(set([prop.get('type', 'Non specificato') for prop in available_properties.values()]))
        property_types.insert(0, "Tutti i tipi")
        selected_type = st.selectbox("üè† Tipo di Immobile", property_types)
    
    with col3:
        # Extract unique locations
        locations = list(set([prop.get('location', 'Non specificato') for prop in available_properties.values()]))
        locations.insert(0, "Tutte le localit√†")
        
        # Se c'√® una destinazione selezionata, la impostiamo come default
        default_index = 0
        if st.session_state.get('destination_selected'):
            if st.session_state.destination_selected in locations:
                default_index = locations.index(st.session_state.destination_selected)
            # Rimuoviamo la destinazione selezionata per evitare problemi in futuro
            st.session_state.pop('destination_selected', None)
        
        selected_location = st.selectbox("üìç Localit√†", locations, index=default_index)
    
    # Price range slider
    prices = [prop.get('price', 0) for prop in available_properties.values()]
    min_price, max_price = min(prices), max(prices)
    
    # Assicuriamoci che min_price e max_price siano diversi
    if min_price == max_price:
        if min_price == 0:
            max_price = 100  # Se entrambi sono 0, impostiamo max_price a 100
        else:
            # Altrimenti, impostiamo max_price a min_price + 10% (o almeno +50)
            max_price = min_price + max(50, int(min_price * 0.1))
    
    price_range = st.slider(
        "üí∞ Fascia di Prezzo (‚Ç¨)",
        min_value=int(min_price),
        max_value=int(max_price),
        value=(int(min_price), int(max_price)),
        step=50
    )
    
    # Services filter with multiselect
    all_services = set()
    for prop in available_properties.values():
        services = prop.get('services', [])
        all_services.update(services)
    
    selected_services = st.multiselect(
        "‚ú® Servizi Desiderati",
        options=sorted(list(all_services)),
        default=[]
    )
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Apply filters
    filtered_properties = {}
    for pid, prop in available_properties.items():
        # Text search filter
        text_match = True
        if search_term:
            text_match = (search_term in prop.get('name', '').lower() or
                         search_term in prop.get('type', '').lower() or
                         search_term in prop.get('location', '').lower())
        
        # Property type filter
        type_match = True
        if selected_type != "Tutti i tipi":
            type_match = prop.get('type', '') == selected_type
        
        # Location filter
        location_match = True
        if selected_location != "Tutte le localit√†":
            location_match = prop.get('location', '') == selected_location
        
        # Price range filter
        price = prop.get('price', 0)
        price_match = price_range[0] <= price <= price_range[1]
        
        # Services filter
        services_match = True
        if selected_services:
            prop_services = set(prop.get('services', []))
            services_match = all(service in prop_services for service in selected_services)
        
        # Add to filtered properties if all conditions match
        if text_match and type_match and location_match and price_match and services_match:
            filtered_properties[pid] = prop
    
    # Display results count
    st.markdown(f"""
        <div style="margin-bottom: 1rem;">
            <p style="font-size: 1.1rem; font-weight: 500;">
                {len(filtered_properties)} immobili trovati
            </p>
        </div>
    """, unsafe_allow_html=True)
    
    # No results message
    if not filtered_properties:
        st.markdown("""
            <div style="background-color: white; padding: 2rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); text-align: center; margin: 2rem 0;">
                <img src="https://cdn-icons-png.flaticon.com/512/6134/6134065.png" style="width: 100px; margin-bottom: 1rem;">
                <h3 style="font-size: 1.5rem; margin-bottom: 1rem;">Nessun risultato</h3>
                <p style="color: #6c757d;">Nessun immobile corrisponde ai criteri di ricerca. Prova a modificare i filtri.</p>
            </div>
        """, unsafe_allow_html=True)
    else:
        # Display properties in a grid
        property_rows = [filtered_properties.items()]
        if len(filtered_properties) > 1:
            # Split properties into rows of 2
            property_rows = [list(filtered_properties.items())[i:i+2] for i in range(0, len(filtered_properties), 2)]
        
        for row in property_rows:
            cols = st.columns(len(row))
            for i, (prop_id, prop) in enumerate(row):
                prop_name = prop.get('name', 'Nome non disponibile')
                prop_type = prop.get('type', 'Tipo non specificato')
                prop_location = prop.get('location', 'Localit√† non specificata')
                prop_price = prop.get('price', 0)
                prop_services = prop.get('services', [])
                prop_phone = prop.get('phone', 'Non disponibile')
                
                with cols[i]:
                    st.markdown(f"""
                        <div class="card-container" style="height: 100%;">
                            <div style="background-color: #f8f9fa; border-radius: 8px; height: 150px; display: flex; align-items: center; justify-content: center; margin-bottom: 1rem;">
                                <span style="font-size: 3rem; color: #4361ee;">üè°</span>
                            </div>
                            <h3 style="font-size: 1.3rem; margin-bottom: 0.5rem;">{prop_name}</h3>
                            <p style="color: #6c757d; margin-bottom: 0.5rem;">
                                <span style="margin-right: 0.5rem;">üìç</span>{prop_location}
                            </p>
                            <p style="color: #6c757d; margin-bottom: 0.5rem;">
                                <span style="margin-right: 0.5rem;">üè†</span>{prop_type}
                            </p>
                            <p style="font-size: 1.4rem; font-weight: 700; color: #4361ee; margin: 1rem 0;">
                                ‚Ç¨{prop_price:,.2f}
                            </p>
                            <div style="margin: 1rem 0;">
                                <p style="font-weight: 500; margin-bottom: 0.5rem;">Servizi:</p>
                                <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                    """, unsafe_allow_html=True)
                    
                    # Display services as badges
                    if prop_services:
                        for service in prop_services[:3]:  # Show first 3 services
                            st.markdown(f"""
                                <span style="background-color: #e6effd; color: #4361ee; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.8rem;">
                                    {service}
                                </span>
                            """, unsafe_allow_html=True)
                        
                        if len(prop_services) > 3:
                            st.markdown(f"""
                                <span style="background-color: #e6effd; color: #4361ee; padding: 0.25rem 0.5rem; border-radius: 4px; font-size: 0.8rem;">
                                    +{len(prop_services) - 3} altri
                                </span>
                            """, unsafe_allow_html=True)
                    else:
                        st.markdown("""
                            <span style="color: #6c757d; font-size: 0.9rem;">
                                Nessun servizio specificato
                            </span>
                        """, unsafe_allow_html=True)
                    
                    st.markdown("</div></div>", unsafe_allow_html=True)
                    
                    # Contact info and buttons
                    st.markdown(f"""
                        <p style="color: #6c757d; margin-bottom: 1rem;">
                            <span style="margin-right: 0.5rem;">üìû</span>{prop_phone}
                        </p>
                    """, unsafe_allow_html=True)
                    
                    col_btn1, col_btn2 = st.columns(2)
                    with col_btn1:
                        if st.button(f"‚ÑπÔ∏è Dettagli", key=f"details_{prop_id}", use_container_width=True):
                            st.session_state[f"show_details_{prop_id}"] = True
                    
                    with col_btn2:
                        if st.button(f"üí¨ Contatta", key=f"interesse_{prop_id}", use_container_width=True):
                            st.success(f"Grazie per l'interesse per {prop_name}! Verrai ricontattato presto.")
                    
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Property details modal (shown when details button is clicked)
                    if st.session_state.get(f"show_details_{prop_id}", False):
                        with st.expander(f"Dettagli di {prop_name}", expanded=True):
                            st.markdown(f"""
                                <h3 style="font-size: 1.5rem; margin-bottom: 1rem;">{prop_name}</h3>
                                <p style="color: #6c757d; margin-bottom: 0.5rem;">
                                    <span style="margin-right: 0.5rem; font-weight: 500;">Tipo:</span>{prop_type}
                                </p>
                                <p style="color: #6c757d; margin-bottom: 0.5rem;">
                                    <span style="margin-right: 0.5rem; font-weight: 500;">Localit√†:</span>{prop_location}
                                </p>
                                <p style="color: #6c757d; margin-bottom: 0.5rem;">
                                    <span style="margin-right: 0.5rem; font-weight: 500;">Prezzo:</span>‚Ç¨{prop_price:,.2f}
                                </p>
                                <p style="color: #6c757d; margin-bottom: 0.5rem;">
                                    <span style="margin-right: 0.5rem; font-weight: 500;">Contatto:</span>{prop_phone}
                                </p>
                                <p style="font-weight: 500; margin: 1rem 0 0.5rem 0;">Servizi:</p>
                            """, unsafe_allow_html=True)
                            
                            if prop_services:
                                for service in prop_services:
                                    st.markdown(f"""
                                        <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                                            <span style="color: #4361ee; margin-right: 0.5rem;">‚úì</span>
                                            <span>{service}</span>
                                        </div>
                                    """, unsafe_allow_html=True)
                            else:
                                st.markdown("""
                                    <p style="color: #6c757d;">Nessun servizio specificato.</p>
                                """, unsafe_allow_html=True)
                            
                            if st.button("Chiudi", key=f"close_details_{prop_id}"):
                                st.session_state[f"show_details_{prop_id}"] = False
                                st.rerun()

# Funzione per mostrare la schermata di benvenuto con animazioni e presentazione dell'azienda
def show_welcome_screen():
    """Mostra la schermata di benvenuto con animazioni e presentazione dell'azienda"""
    
    # Inizializza lo stato della schermata di benvenuto se non esiste
    if 'welcome_screen_step' not in st.session_state:
        st.session_state.welcome_screen_step = 1
    
    # Stile CSS per le animazioni
    st.markdown("""
    <style>
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    @keyframes slideIn {
        from { opacity: 0; transform: translateX(-50px); }
        to { opacity: 1; transform: translateX(0); }
    }
    @keyframes scaleIn {
        from { opacity: 0; transform: scale(0.8); }
        to { opacity: 1; transform: scale(1); }
    }
    .welcome-title {
        animation: fadeIn 1.2s ease-out;
    }
    .welcome-subtitle {
        animation: fadeIn 1.5s ease-out;
    }
    .welcome-text {
        animation: fadeIn 1.8s ease-out;
    }
    .welcome-feature {
        animation: slideIn 1s ease-out;
    }
    .welcome-cta {
        animation: scaleIn 1.5s ease-out;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Contenuto in base allo step corrente
    if st.session_state.welcome_screen_step == 1:
        # Prima schermata: Benvenuto e introduzione
        st.markdown("""
        <div style="text-align: center; padding: 2rem 0;">
            <h1 class="welcome-title" style="font-size: 3.5rem; font-weight: 800; color: #4361ee; margin-bottom: 1.5rem;">
                Benvenuto in CiaoHost
            </h1>
            <p class="welcome-subtitle" style="font-size: 1.5rem; color: #6c757d; margin-bottom: 3rem;">
                La piattaforma intelligente per la gestione degli affitti brevi
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Animazione del logo
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown("""
            <div style="text-align: center; margin-bottom: 3rem; animation: scaleIn 1.5s ease-out;">
            """, unsafe_allow_html=True)
            
            # Utilizziamo la nostra funzione di logo
            show_company_logo(size="large", with_text=False)
            
            st.markdown("""
            </div>
            """, unsafe_allow_html=True)
        
        # Testo introduttivo
        st.markdown("""
        <div class="welcome-text" style="text-align: center; max-width: 800px; margin: 0 auto; padding: 1rem;">
            <p style="font-size: 1.2rem; line-height: 1.6; color: #495057; margin-bottom: 2rem;">
                CiaoHost √® la soluzione completa per gestire i tuoi affitti brevi con facilit√† ed efficienza.
                La nostra piattaforma combina intelligenza artificiale, automazione e strumenti di gestione
                avanzati per massimizzare i tuoi guadagni e minimizzare il tempo dedicato alla gestione.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Pulsante per continuare
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("Scopri di pi√π", use_container_width=True, key="welcome_next_1"):
                st.session_state.welcome_screen_step = 2
                st.rerun()
    
    elif st.session_state.welcome_screen_step == 2:
        # Seconda schermata: Chi siamo
        st.markdown("""
        <div style="text-align: center; padding: 1rem 0;">
            <h1 class="welcome-title" style="font-size: 2.5rem; font-weight: 700; color: #4361ee; margin-bottom: 1rem;">
                Chi Siamo
            </h1>
            <p class="welcome-subtitle" style="font-size: 1.2rem; color: #6c757d; margin-bottom: 2rem;">
                La storia dietro CiaoHost
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Storia dell'azienda
        st.markdown("""
        <div class="welcome-text" style="max-width: 800px; margin: 0 auto; padding: 1rem;">
            <p style="font-size: 1.1rem; line-height: 1.6; color: #495057; margin-bottom: 1.5rem;">
                CiaoHost nasce nel 2025 dall'idea di un gruppo di esperti nel settore immobiliare e tecnologico
                con l'obiettivo di rivoluzionare la gestione degli affitti brevi in Italia.
            </p>
            <p style="font-size: 1.1rem; line-height: 1.6; color: #495057; margin-bottom: 1.5rem;">
                La nostra missione √® semplificare la vita degli host, automatizzando i processi ripetitivi
                e fornendo strumenti intelligenti per ottimizzare i guadagni e migliorare l'esperienza degli ospiti.
            </p>
            <p style="font-size: 1.1rem; line-height: 1.6; color: #495057; margin-bottom: 1.5rem;">
                Oggi, CiaoHost √® utilizzato da migliaia di host in tutta Italia e continua a crescere
                grazie al passaparola dei nostri clienti soddisfatti.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Pulsanti di navigazione
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Indietro", use_container_width=True, key="welcome_back_2"):
                st.session_state.welcome_screen_step = 1
                st.rerun()
        with col2:
            if st.button("Continua", use_container_width=True, key="welcome_next_2"):
                st.session_state.welcome_screen_step = 3
                st.rerun()
    
    elif st.session_state.welcome_screen_step == 3:
        # Terza schermata: Cosa facciamo
        st.markdown("""
        <div style="text-align: center; padding: 1rem 0;">
            <h1 class="welcome-title" style="font-size: 2.5rem; font-weight: 700; color: #4361ee; margin-bottom: 1rem;">
                Cosa Facciamo
            </h1>
            <p class="welcome-subtitle" style="font-size: 1.2rem; color: #6c757d; margin-bottom: 2rem;">
                Le nostre soluzioni per il tuo business
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Caratteristiche principali - Utilizziamo un approccio diverso per evitare problemi di rendering
        col_features = st.container()
        with col_features:
            # Caratteristica 1: Assistente AI
            feature_col1, feature_col2 = st.columns([1, 5])
            with feature_col1:
                st.markdown("<h2 style='font-size: 2.5rem; color: #4361ee; text-align: center;'>ü§ñ</h2>", unsafe_allow_html=True)
            with feature_col2:
                st.markdown("<h3 style='font-size: 1.3rem; font-weight: 600; margin-bottom: 0.5rem;'>Assistente AI Multilingua</h3>", unsafe_allow_html=True)
                st.markdown("<p style='font-size: 1rem; color: #6c757d;'>Comunica con i tuoi ospiti in qualsiasi lingua, 24/7, senza barriere linguistiche.</p>", unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)
            
            # Caratteristica 2: Prezzi Dinamici
            feature_col1, feature_col2 = st.columns([1, 5])
            with feature_col1:
                st.markdown("<h2 style='font-size: 2.5rem; color: #4361ee; text-align: center;'>‚öñÔ∏è</h2>", unsafe_allow_html=True)
            with feature_col2:
                st.markdown("<h3 style='font-size: 1.3rem; font-weight: 600; margin-bottom: 0.5rem;'>Prezzi Dinamici</h3>", unsafe_allow_html=True)
                st.markdown("<p style='font-size: 1rem; color: #6c757d;'>Ottimizza automaticamente i prezzi in base alla domanda, eventi locali e stagionalit√†.</p>", unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)
            
            # Caratteristica 3: Gestione Pulizie
            feature_col1, feature_col2 = st.columns([1, 5])
            with feature_col1:
                st.markdown("<h2 style='font-size: 2.5rem; color: #4361ee; text-align: center;'>üßπ</h2>", unsafe_allow_html=True)
            with feature_col2:
                st.markdown("<h3 style='font-size: 1.3rem; font-weight: 600; margin-bottom: 0.5rem;'>Gestione Pulizie</h3>", unsafe_allow_html=True)
                st.markdown("<p style='font-size: 1rem; color: #6c757d;'>Organizza e monitora le pulizie dei tuoi immobili con un sistema integrato.</p>", unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)
            
            # Caratteristica 4: Dashboard Avanzata
            feature_col1, feature_col2 = st.columns([1, 5])
            with feature_col1:
                st.markdown("<h2 style='font-size: 2.5rem; color: #4361ee; text-align: center;'>üìä</h2>", unsafe_allow_html=True)
            with feature_col2:
                st.markdown("<h3 style='font-size: 1.3rem; font-weight: 600; margin-bottom: 0.5rem;'>Dashboard Avanzata</h3>", unsafe_allow_html=True)
                st.markdown("<p style='font-size: 1rem; color: #6c757d;'>Visualizza statistiche dettagliate e analisi predittive per prendere decisioni informate.</p>", unsafe_allow_html=True)
        
        # Pulsanti di navigazione
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Indietro", use_container_width=True, key="welcome_back_3"):
                st.session_state.welcome_screen_step = 2
                st.rerun()
        with col2:
            if st.button("Continua", use_container_width=True, key="welcome_next_3"):
                st.session_state.welcome_screen_step = 4
                st.rerun()
    
    elif st.session_state.welcome_screen_step == 4:
        # Quarta schermata: Perch√© sceglierci
        st.markdown("""
        <div style="text-align: center; padding: 1rem 0;">
            <h1 class="welcome-title" style="font-size: 2.5rem; font-weight: 700; color: #4361ee; margin-bottom: 1rem;">
                Perch√© Scegliere CiaoHost
            </h1>
            <p class="welcome-subtitle" style="font-size: 1.2rem; color: #6c757d; margin-bottom: 2rem;">
                I vantaggi che ci distinguono
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Vantaggi
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="welcome-feature" style="padding: 1.5rem; background-color: #f8f9fa; border-radius: 10px; height: 100%; margin-bottom: 1rem;">
                <h3 style="font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem; color: #212529;">Risparmio di Tempo</h3>
                <p style="font-size: 1rem; color: #6c757d; line-height: 1.6;">
                    Automatizza fino all'80% delle attivit√† di gestione quotidiane, liberando il tuo tempo per ci√≤ che conta davvero.
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div class="welcome-feature" style="padding: 1.5rem; background-color: #f8f9fa; border-radius: 10px; height: 100%; animation-delay: 0.3s;">
                <h3 style="font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem; color: #212529;">Aumento dei Guadagni</h3>
                <p style="font-size: 1rem; color: #6c757d; line-height: 1.6;">
                    I nostri clienti registrano un aumento medio del 25% dei guadagni grazie ai nostri strumenti di ottimizzazione.
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="welcome-feature" style="padding: 1.5rem; background-color: #f8f9fa; border-radius: 10px; height: 100%; margin-bottom: 1rem; animation-delay: 0.2s;">
                <h3 style="font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem; color: #212529;">Supporto Dedicato</h3>
                <p style="font-size: 1rem; color: #6c757d; line-height: 1.6;">
                    Un team di esperti sempre a tua disposizione per aiutarti a massimizzare il potenziale dei tuoi immobili.
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div class="welcome-feature" style="padding: 1.5rem; background-color: #f8f9fa; border-radius: 10px; height: 100%; animation-delay: 0.4s;">
                <h3 style="font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem; color: #212529;">Facilit√† d'Uso</h3>
                <p style="font-size: 1rem; color: #6c757d; line-height: 1.6;">
                    Un'interfaccia intuitiva progettata per essere utilizzata da chiunque, senza necessit√† di competenze tecniche.
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # Call to action
        st.markdown("""
        <div class="welcome-cta" style="text-align: center; margin-top: 2rem; padding: 2rem; background-color: #e6effd; border-radius: 10px;">
            <h2 style="font-size: 1.8rem; font-weight: 700; color: #4361ee; margin-bottom: 1rem;">
                Pronto a trasformare la gestione dei tuoi immobili?
            </h2>
            <p style="font-size: 1.1rem; color: #6c757d; margin-bottom: 1.5rem;">
                Unisciti a migliaia di host soddisfatti e scopri come CiaoHost pu√≤ rivoluzionare il tuo business.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Pulsanti di navigazione
        col1, col2, col3 = st.columns([1, 2, 1])
        with col1:
            if st.button("Indietro", use_container_width=True, key="welcome_back_4"):
                st.session_state.welcome_screen_step = 3
                st.rerun()
        with col2:
            if st.button("Accedi o Registrati", use_container_width=True, key="welcome_finish"):
                # Reset dello step per la prossima visita
                st.session_state.welcome_screen_step = 1
                # Imposta il flag per mostrare la schermata di login
                st.session_state.show_login_screen = True
                st.rerun()
        with col3:
            pass

def show_login():
    # Verifica se mostrare la schermata di benvenuto
    if not st.session_state.get('show_login_screen', False):
        show_welcome_screen()
        return
    
    # Create a centered login container
    col_left, col_center, col_right = st.columns([1, 2, 1])
    
    with col_center:
        st.markdown("""
            <div style="text-align: center; margin-bottom: 2rem;">
                <h1 style="font-size: 2.5rem; font-weight: 700; margin-bottom: 0.5rem;">
                    <span style="color: #4361ee;">üè°</span> CiaoHost
                </h1>
                <p style="font-size: 1.2rem; color: #6c757d;">
                    La piattaforma intelligente per la gestione dei tuoi immobili
                </p>
            </div>
        """, unsafe_allow_html=True)
        
        # Login card container
        st.markdown("""
            <div style="background-color: white; padding: 2rem; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.08);">
        """, unsafe_allow_html=True)
        
        # Tabs with improved styling
        tab_style = """
            <style>
                .stTabs [data-baseweb="tab-list"] {
                    gap: 1rem;
                }
                .stTabs [data-baseweb="tab"] {
                    height: 50px;
                    white-space: pre-wrap;
                    border-radius: 4px;
                    font-size: 16px;
                    font-weight: 500;
                }
                .stTabs [aria-selected="true"] {
                    background-color: rgba(67, 97, 238, 0.1);
                    color: #4361ee;
                }
            </style>
        """
        st.markdown(tab_style, unsafe_allow_html=True)
        
        tab1, tab2 = st.tabs(["üîë Accedi", "‚úèÔ∏è Registrati"])
        
        with tab1:
            st.markdown("<p style='height: 20px;'></p>", unsafe_allow_html=True)
            
            with st.form("login_form"):
                email = st.text_input("üìß Email", key="login_email", placeholder="Inserisci la tua email")
                password = st.text_input("üîí Password", type="password", key="login_pw", placeholder="Inserisci la tua password")
                
                # Remember me checkbox
                col_remember, col_forgot = st.columns(2)
                with col_remember:
                    st.checkbox("Ricordami", key="remember_me")
                with col_forgot:
                    st.markdown("<div style='text-align: right;'><a href='#' style='color: #4361ee; text-decoration: none; font-size: 0.9rem;'>Password dimenticata?</a></div>", unsafe_allow_html=True)
                
                st.markdown("<p style='height: 20px;'></p>", unsafe_allow_html=True)
                
                # Login button with improved styling
                login_button = st.form_submit_button("Accedi", use_container_width=True)
                
                if login_button:
                    if not email or not password:
                        st.error("Inserisci email e password.")
                    elif email == ADMIN_CREDENTIALS["username"] and password == ADMIN_CREDENTIALS["password"]:
                        # Show loading animation
                        with st.spinner("Accesso in corso..."):
                            time.sleep(0.5)  # Simulate loading
                            st.session_state.is_authenticated = True
                            st.session_state.current_user_email = "admin"
                            st.session_state.current_page = 'home'
                            st.rerun()
                    elif email in st.session_state.users and st.session_state.users[email] == password:
                        # Show loading animation
                        with st.spinner("Accesso in corso..."):
                            time.sleep(0.5)  # Simulate loading
                            st.session_state.is_authenticated = True
                            st.session_state.current_user_email = email
                            st.session_state.current_page = 'home'
                            st.rerun()
                    else:
                        st.error("Credenziali non valide.")
        
        with tab2:
            st.markdown("<p style='height: 20px;'></p>", unsafe_allow_html=True)
            
            with st.form("register_form"):
                new_email = st.text_input("üìß Email", key="reg_email", placeholder="Inserisci la tua email")
                
                # Password fields in columns
                col_pwd1, col_pwd2 = st.columns(2)
                with col_pwd1:
                    new_password = st.text_input("üîí Password", type="password", key="reg_pw", placeholder="Crea una password")
                with col_pwd2:
                    confirm_password = st.text_input("üîí Conferma", type="password", key="confirm_pw", placeholder="Ripeti la password")
                
                # Terms and conditions checkbox
                st.checkbox("Accetto i Termini e le Condizioni", key="terms_accepted")
                
                st.markdown("<p style='height: 20px;'></p>", unsafe_allow_html=True)
                
                # Register button
                register_button = st.form_submit_button("Crea Account", use_container_width=True)
                
                if register_button:
                    if not new_email or not new_password:
                        st.error("Inserisci email e password validi.")
                    elif not st.session_state.get("terms_accepted", False):
                        st.error("Devi accettare i Termini e le Condizioni per continuare.")
                    elif new_email in st.session_state.users:
                        st.error("Email gi√† registrata!")
                    elif new_email == ADMIN_CREDENTIALS["username"]:
                        st.error("Questo username √® riservato.")
                    elif "@" not in new_email or "." not in new_email:
                        st.error("Inserisci un indirizzo email valido.")
                    elif len(new_password) < 6:
                        st.error("La password deve contenere almeno 6 caratteri.")
                    elif new_password != confirm_password:
                        st.error("Le password non corrispondono.")
                    else:
                        # Add new user with loading animation
                        with st.spinner("Creazione account in corso..."):
                            time.sleep(0.5)  # Simulate loading
                            st.session_state.users[new_email] = new_password
                            save_database()
                            st.success("Registrazione completata! Ora puoi accedere.")
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # Social login options
        st.markdown("""
            <div style="text-align: center; margin-top: 1.5rem;">
                <p style="color: #6c757d; margin-bottom: 1rem;">Oppure accedi con</p>
                <div style="display: flex; justify-content: center; gap: 1rem;">
                    <button style="background-color: #4267B2; color: white; border: none; border-radius: 4px; padding: 8px 16px; cursor: pointer;">
                        Facebook
                    </button>
                    <button style="background-color: #DB4437; color: white; border: none; border-radius: 4px; padding: 8px 16px; cursor: pointer;">
                        Google
                    </button>
                    <button style="background-color: #1DA1F2; color: white; border: none; border-radius: 4px; padding: 8px 16px; cursor: pointer;">
                        Twitter
                    </button>
                </div>
            </div>
        """, unsafe_allow_html=True)
        
        # Demo credentials with better styling
        st.markdown("""
            <div style="text-align: center; margin-top: 2rem; padding: 1rem; background-color: #e6effd; border-radius: 8px;">
                <p style="margin-bottom: 0.5rem; font-weight: 500;">Per demo, usa:</p>
                <p style="font-family: monospace; background-color: white; padding: 8px; border-radius: 4px; display: inline-block;">
                    admin@ciaohost.it / admin123
                </p>
            </div>
        """, unsafe_allow_html=True)

def show_subscription_plans():
    st.markdown("""
        <h1 style="font-size: 2.2rem; font-weight: 700; margin-bottom: 1rem;">
            <span style="color: #4361ee;">üíº</span> Piani di Abbonamento
        </h1>
        <p style="font-size: 1.1rem; color: #6c757d; margin-bottom: 2rem;">
            Scegli il piano pi√π adatto alle tue esigenze per la gestione dei tuoi immobili
        </p>
    """, unsafe_allow_html=True)

    # Pricing toggle
    col_toggle_left, col_toggle_center, col_toggle_right = st.columns([2, 1, 2])
    with col_toggle_center:
        billing_period = st.radio(
            "Periodo di fatturazione",
            ["Mensile", "Annuale (sconto 15%)"],
            horizontal=True,
            key="billing_period"
        )
    
    is_annual = billing_period.startswith("Annuale")
    
    # Calculate prices based on billing period
    base_price = 25
    pro_price = 44.99
    
    if is_annual:
        base_price = round(base_price * 0.85, 2)
        pro_price = round(pro_price * 0.85, 2)
    
    # Pricing cards
    st.markdown("<div style='display: flex; gap: 20px; margin-top: 2rem;'>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        st.markdown(f"""
            <div style="background-color: white; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); height: 100%; position: relative; padding: 2rem; border: 1px solid #dee2e6;">
                <div style="position: absolute; top: -12px; left: 50%; transform: translateX(-50%); background-color: #e6effd; color: #4361ee; padding: 5px 15px; border-radius: 20px; font-weight: 500; font-size: 0.9rem;">
                    Base
                </div>
                <div style="text-align: center; margin-bottom: 1.5rem; margin-top: 0.5rem;">
                    <h2 style="font-size: 2.5rem; font-weight: 700; color: #4361ee; margin-bottom: 0.5rem;">‚Ç¨{base_price}</h2>
                    <p style="color: #6c757d; font-size: 0.9rem;">per immobile / {('mese (fatturato annualmente)' if is_annual else 'mese')}</p>
                    <p style="color: #6c757d; font-size: 0.9rem;">+ 10% commissione</p>
                </div>
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Concierge AI multilingua 24/7</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Ottimizzazione prezzi con AI</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Dashboard base con statistiche</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Sistema antifrode ospiti</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Archivio fiscale e fatturazione</span>
                    </div>
                </div>
            </div>
        """, unsafe_allow_html=True)
        
        if st.button("Scegli Piano Base", key="buy_base", use_container_width=True):
            with st.spinner("Attivazione del piano in corso..."):
                time.sleep(1)
                st.success("Ottima scelta! Preparazione della tua dashboard...")
                # Prepara i dati di esempio
                data = {
                    'Mese': ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'],
                    'Guadagno': [1200, 1350, 1800, 2200, 2100, 2400],
                    'Occupazione': [75, 82, 88, 95, 93, 98],
                    'Prenotazioni': [10, 12, 15, 18, 17, 20]
                }
                st.session_state.data = pd.DataFrame(data)
                
                # Imposta direttamente la variabile di sessione
                st.session_state.subscription_purchased = True
                st.session_state.subscription_type = "base"
                
                # Mostra l'effetto coriandoli per celebrare l'acquisto
                show_confetti()
                
                # Messaggio di successo
                st.success("Abbonamento attivato con successo! Tra 5 secondi verrai reindirizzato alla dashboard.")
                
                # Aggiungi un ritardo di 5 secondi
                time.sleep(5)
                
                # Imposta la pagina corrente
                st.session_state.current_page = 'dashboard'
                
                # Forza il rerun
                st.rerun()

    with col2:
        st.markdown(f"""
            <div style="background-color: white; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.15); height: 100%; position: relative; padding: 2rem; border: 2px solid #4361ee; transform: scale(1.05);">
                <div style="position: absolute; top: -12px; left: 50%; transform: translateX(-50%); background-color: #4361ee; color: white; padding: 5px 15px; border-radius: 20px; font-weight: 500; font-size: 0.9rem;">
                    Pro
                </div>
                <div style="position: absolute; top: -12px; right: -12px; background-color: #ff9800; color: white; padding: 5px 10px; border-radius: 20px; font-weight: 500; font-size: 0.8rem;">
                    Pi√π popolare
                </div>
                <div style="text-align: center; margin-bottom: 1.5rem; margin-top: 0.5rem;">
                    <h2 style="font-size: 2.5rem; font-weight: 700; color: #4361ee; margin-bottom: 0.5rem;">‚Ç¨{pro_price}</h2>
                    <p style="color: #6c757d; font-size: 0.9rem;">per immobile / {('mese (fatturato annualmente)' if is_annual else 'mese')}</p>
                    <p style="color: #6c757d; font-size: 0.9rem;">+ 10% commissione</p>
                </div>
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span><strong>Tutto il Piano Base</strong></span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Dashboard avanzata personalizzabile</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Analisi predittiva delle prenotazioni</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Personalizzazione avanzata del chatbot AI</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Supporto tecnico prioritario dedicato</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Integrazione API con portali esterni</span>
                    </div>
                </div>
            </div>
        """, unsafe_allow_html=True)
        
        if st.button("Scegli Piano Pro", key="buy_pro", use_container_width=True):
            with st.spinner("Attivazione del piano in corso..."):
                time.sleep(1)
                st.success("Eccellente scelta! Preparazione della tua dashboard PRO...")
                # Prepara i dati di esempio
                data = {
                    'Mese': ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'],
                    'Guadagno': [1200, 1350, 1800, 2200, 2100, 2400],
                    'Occupazione': [75, 82, 88, 95, 93, 98],
                    'Prenotazioni': [10, 12, 15, 18, 17, 20]
                }
                st.session_state.data = pd.DataFrame(data)
                
                # Imposta direttamente la variabile di sessione
                st.session_state.subscription_purchased = True
                st.session_state.subscription_type = "pro"
                
                # Mostra l'effetto coriandoli per celebrare l'acquisto
                show_confetti()
                
                # Messaggio di successo
                st.success("Abbonamento PRO attivato con successo! Tra 5 secondi verrai reindirizzato alla dashboard.")
                
                # Aggiungi un ritardo di 5 secondi
                time.sleep(5)
                
                # Imposta la pagina corrente
                st.session_state.current_page = 'dashboard'
                
                # Forza il rerun
                st.rerun()
    
    with col3:
        st.markdown(f"""
            <div style="background-color: white; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.08); height: 100%; position: relative; padding: 2rem; border: 1px solid #dee2e6;">
                <div style="position: absolute; top: -12px; left: 50%; transform: translateX(-50%); background-color: #e6effd; color: #4361ee; padding: 5px 15px; border-radius: 20px; font-weight: 500; font-size: 0.9rem;">
                    Enterprise
                </div>
                <div style="text-align: center; margin-bottom: 1.5rem; margin-top: 0.5rem;">
                    <h2 style="font-size: 2.5rem; font-weight: 700; color: #4361ee; margin-bottom: 0.5rem;">Contattaci</h2>
                    <p style="color: #6c757d; font-size: 0.9rem;">per un'offerta personalizzata</p>
                    <p style="color: #6c757d; font-size: 0.9rem;">+ commissione personalizzata</p>
                </div>
                <div style="margin-bottom: 1.5rem;">
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span><strong>Tutto il Piano Pro</strong></span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Soluzioni su misura per grandi portafogli</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Account manager dedicato</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Formazione personalizzata del team</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>Sviluppo di funzionalit√† su misura</span>
                    </div>
                    <div style="display: flex; align-items: center; margin-bottom: 0.8rem;">
                        <span style="color: #4361ee; margin-right: 0.5rem; font-size: 1.2rem;">‚úì</span>
                        <span>SLA garantito con supporto 24/7</span>
                    </div>
                </div>
            </div>
        """, unsafe_allow_html=True)
        
        if st.button("Contattaci", key="contact_enterprise", use_container_width=True):
            st.info("Un nostro consulente ti contatter√† al pi√π presto per discutere le tue esigenze specifiche.")
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # FAQ Section
    st.markdown("""
        <div style="margin-top: 4rem;">
            <h2 style="font-size: 1.8rem; font-weight: 600; margin-bottom: 1.5rem;">Domande Frequenti</h2>
        </div>
    """, unsafe_allow_html=True)
    
    faq_col1, faq_col2 = st.columns(2)
    
    with faq_col1:
        with st.expander("Posso cambiare piano in qualsiasi momento?"):
            st.markdown("""
                S√¨, puoi passare da un piano all'altro in qualsiasi momento. Se passi a un piano superiore, 
                l'aggiornamento sar√† immediato. Se passi a un piano inferiore, il cambiamento avverr√† alla fine 
                del periodo di fatturazione corrente.
            """)
        
        with st.expander("Come funziona la commissione del 10%?"):
            st.markdown("""
                La commissione del 10% viene applicata solo sulle prenotazioni effettivamente confermate 
                attraverso la piattaforma. Non ci sono commissioni su prenotazioni che gestisci esternamente.
            """)
        
        with st.expander("Posso provare la piattaforma prima di acquistare?"):
            st.markdown("""
                Offriamo una demo gratuita di 14 giorni del Piano Pro senza necessit√† di carta di credito. 
                Contattaci per attivare la tua prova gratuita.
            """)
    
    with faq_col2:
        with st.expander("Quali metodi di pagamento accettate?"):
            st.markdown("""
                Accettiamo tutte le principali carte di credito (Visa, Mastercard, American Express), 
                PayPal, bonifico bancario e, per i piani Enterprise, anche fatturazione diretta.
            """)
        
        with st.expander("Posso annullare il mio abbonamento?"):
            st.markdown("""
                S√¨, puoi annullare il tuo abbonamento in qualsiasi momento. Se annulli, manterrai 
                l'accesso fino alla fine del periodo di fatturazione corrente.
            """)
        
        with st.expander("Offrite sconti per pi√π immobili?"):
            st.markdown("""
                S√¨, offriamo sconti progressivi basati sul numero di immobili gestiti. A partire da 5 immobili, 
                riceverai uno sconto del 5%, che aumenta fino al 20% per portafogli di oltre 20 immobili.
            """)
    
    # Footer note
    st.markdown("""
        <div style="margin-top: 3rem; padding: 1rem; background-color: #f8f9fa; border-radius: 8px; text-align: center;">
            <p style="color: #6c757d; margin-bottom: 0;">Tutti i prezzi sono IVA esclusa. Per soluzioni personalizzate per grandi portafogli immobiliari, contatta il nostro team commerciale.</p>
        </div>
    """, unsafe_allow_html=True)

def show_dashboard():
    # Assicuriamoci che l'abbonamento sia attivo
    if 'subscription_purchased' not in st.session_state:
        st.session_state.subscription_purchased = True
    
    # Versione semplificata della dashboard che sicuramente funzioner√†
    st.title("üìä Dashboard CiaoHost")
    st.subheader("Panoramica delle performance dei tuoi immobili")
    
    # Pulsanti di navigazione
    col1, col2, col3, col4 = st.columns([1, 1, 1, 3])
    with col1:
        if st.button("üè† Home", key="dash_home", use_container_width=True):
            st.session_state.current_page = 'home'
            st.rerun()
    with col2:
        if st.button("üì• Esporta", key="dash_export", use_container_width=True):
            st.info("Funzionalit√† di esportazione in arrivo!")
    with col3:
        if st.button("üîÑ Aggiorna", key="dash_refresh", use_container_width=True):
            st.success("Dati aggiornati!")
    
    st.markdown("---")
    
    # Dati di esempio
    data = {
        'Mese': ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'],
        'Guadagno': [1200, 1350, 1800, 2200, 2100, 2400],
        'Occupazione': [75, 82, 88, 95, 93, 98],
        'Prenotazioni': [10, 12, 15, 18, 17, 20]
    }
    df = pd.DataFrame(data)
    
    # Metriche principali
    st.subheader("Metriche principali")
    metric_cols = st.columns(4)
    with metric_cols[0]:
        st.metric(label="Guadagno Medio", value=f"‚Ç¨{df['Guadagno'].mean():.2f}", delta="12.5%")
    with metric_cols[1]:
        st.metric(label="Occupazione Media", value=f"{df['Occupazione'].mean():.1f}%", delta="5.2%")
    with metric_cols[2]:
        st.metric(label="Prenotazioni Totali", value=f"{df['Prenotazioni'].sum()}", delta="8.3%")
    with metric_cols[3]:
        st.metric(label="Tasso di Conversione", value="68.5%", delta="3.7%")
    
    st.markdown("---")
    
    # Grafici
    st.subheader("Andamento Mensile")
    chart_tabs = st.tabs(["üìà Guadagni", "üè† Occupazione", "üìÖ Prenotazioni"])
    
    with chart_tabs[0]:
        st.line_chart(df.set_index('Mese')['Guadagno'])
    with chart_tabs[1]:
        st.line_chart(df.set_index('Mese')['Occupazione'])
    with chart_tabs[2]:
        st.bar_chart(df.set_index('Mese')['Prenotazioni'])
    
    # Tabella dati
    st.subheader("Dati Dettagliati")
    st.dataframe(
        df,
        column_config={
            "Mese": st.column_config.TextColumn("Mese"),
            "Guadagno": st.column_config.NumberColumn("Guadagno (‚Ç¨)", format="‚Ç¨%.2f"),
            "Occupazione": st.column_config.ProgressColumn("Occupazione (%)", format="%d%%", min_value=0, max_value=100),
            "Prenotazioni": st.column_config.NumberColumn("Prenotazioni", format="%d")
        },
        use_container_width=True,
        hide_index=True
    )

# Placeholder functions for attached_assets functionalities
def show_cleaning_management_page():
    # Aggiungi CSS specifico per questa pagina
    st.markdown("""
    <style>
        /* Force light theme for this page */
        .main .block-container {
            background-color: white !important;
        }
        
        /* Style for buttons in this page */
        .stButton button {
            background-color: #4361ee !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
            padding: 8px 16px !important;
            font-weight: 500 !important;
        }
        
        /* Style for dataframes in this page */
        .dataframe {
            background-color: white !important;
            color: #333333 !important;
            border-collapse: collapse !important;
            width: 100% !important;
        }
        
        /* Style for tabs in this page */
        .stTabs [data-baseweb="tab"] {
            background-color: white !important;
            color: #333333 !important;
            font-weight: 500 !important;
        }
        
        /* Style for tab content in this page */
        .stTabs [data-baseweb="tab-panel"] {
            background-color: white !important;
            color: #333333 !important;
            padding: 16px !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Verifica se l'utente ha un abbonamento attivo
    if not st.session_state.get('subscription_purchased', False):
        st.warning("Per accedere alla gestione pulizie √® necessario acquistare un piano di abbonamento.")
        # Mostra un messaggio di attesa e poi reindirizza
        with st.spinner("Reindirizzamento alla pagina dei piani di abbonamento..."):
            time.sleep(2)
            st.session_state.current_page = 'subscriptions'
            st.rerun()
        return
    
    # Versione semplificata della gestione pulizie
    st.title("üßπ Gestione Pulizie")
    
    # Pulsanti di navigazione
    col1, col2, col3 = st.columns([1, 1, 2])
    with col1:
        if st.button("üè† Home", key="clean_home", use_container_width=True):
            st.session_state.current_page = 'home'
            st.rerun()
    with col2:
        if st.button("üîÑ Aggiorna", key="clean_refresh", use_container_width=True):
            st.success("Dati aggiornati!")
    
    st.markdown("---")
    
    # Tabs per le diverse funzionalit√†
    tab_titles = ["Calendario Pulizie", "Servizi di Pulizia", "Programmazione", "Messaggi Automatici"]
    tabs = st.tabs(tab_titles)
    
    with tabs[0]:  # Calendario Pulizie
        st.subheader("Calendario Pulizie")
        st.info("Qui potrai visualizzare il calendario delle pulizie programmate.")
        
        # Esempio di calendario
        st.markdown("### Pulizie programmate")
        calendar_data = {
            'Data': ['15/05/2023', '18/05/2023', '20/05/2023', '25/05/2023', '30/05/2023'],
            'Propriet√†': ['Villa Marina', 'Appartamento Centro', 'Casa Giardino', 'Loft Moderno', 'Villa Marina'],
            'Servizio': ['Pulizia Standard', 'Pulizia Profonda', 'Pulizia Standard', 'Pulizia Standard', 'Pulizia Profonda'],
            'Stato': ['Completata', 'Programmata', 'Programmata', 'Programmata', 'Programmata']
        }
        calendar_df = pd.DataFrame(calendar_data)
        st.dataframe(calendar_df, use_container_width=True)
    
    with tabs[1]:  # Servizi di Pulizia
        st.subheader("Servizi di Pulizia")
        st.info("Qui potrai gestire i servizi di pulizia offerti.")
        
        # Esempio di servizi
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### Pulizia Standard")
            st.markdown("- Durata: 2 ore")
            st.markdown("- Prezzo: ‚Ç¨50")
            st.markdown("- Include: Pulizia generale, cambio biancheria")
            if st.button("Modifica", key="edit_standard"):
                st.info("Funzionalit√† di modifica in arrivo!")
        
        with col2:
            st.markdown("### Pulizia Profonda")
            st.markdown("- Durata: 4 ore")
            st.markdown("- Prezzo: ‚Ç¨100")
            st.markdown("- Include: Pulizia completa, sanificazione, cambio biancheria")
            if st.button("Modifica", key="edit_deep"):
                st.info("Funzionalit√† di modifica in arrivo!")
        
        if st.button("Aggiungi Nuovo Servizio", key="add_service"):
            st.info("Funzionalit√† di aggiunta in arrivo!")
    
    with tabs[2]:  # Programmazione
        st.subheader("Programmazione Pulizie")
        st.info("Qui potrai programmare nuove pulizie.")
        
        # Form di esempio
        with st.form("schedule_form"):
            st.selectbox("Propriet√†", ["Villa Marina", "Appartamento Centro", "Casa Giardino", "Loft Moderno"])
            st.selectbox("Servizio", ["Pulizia Standard", "Pulizia Profonda"])
            st.date_input("Data")
            st.time_input("Ora")
            st.text_area("Note")
            
            if st.form_submit_button("Programma Pulizia"):
                st.success("Pulizia programmata con successo!")
    
    with tabs[3]:  # Messaggi Automatici
        st.subheader("Messaggi Automatici")
        st.info("Qui potrai configurare messaggi automatici per le pulizie.")
        
        # Esempio di configurazione messaggi
        st.checkbox("Invia promemoria 24h prima della pulizia", value=True)
        st.checkbox("Invia conferma al completamento della pulizia", value=True)
        st.checkbox("Invia richiesta di feedback dopo la pulizia", value=False)
        
        st.text_area("Modello messaggio promemoria", 
                    "Gentile {nome_cliente}, le ricordiamo che domani √® programmata una pulizia presso {nome_propriet√†} alle ore {orario}.")
        
        if st.button("Salva Configurazione"):
            st.success("Configurazione salvata con successo!")


def show_dynamic_pricing_page():
    # Aggiungi CSS specifico per questa pagina
    st.markdown("""
    <style>
        /* Force light theme for this page */
        .main .block-container {
            background-color: white !important;
        }
        
        /* Style for buttons in this page */
        .stButton button {
            background-color: #4361ee !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
            padding: 8px 16px !important;
            font-weight: 500 !important;
        }
        
        /* Style for dataframes in this page */
        .dataframe {
            background-color: white !important;
            color: #333333 !important;
            border-collapse: collapse !important;
            width: 100% !important;
        }
        
        /* Style for tabs in this page */
        .stTabs [data-baseweb="tab"] {
            background-color: white !important;
            color: #333333 !important;
            font-weight: 500 !important;
        }
        
        /* Style for tab content in this page */
        .stTabs [data-baseweb="tab-panel"] {
            background-color: white !important;
            color: #333333 !important;
            padding: 16px !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Verifica se l'utente ha un abbonamento attivo
    if not st.session_state.get('subscription_purchased', False):
        st.warning("Per accedere ai prezzi dinamici √® necessario acquistare un piano di abbonamento.")
        # Mostra un messaggio di attesa e poi reindirizza
        with st.spinner("Reindirizzamento alla pagina dei piani di abbonamento..."):
            time.sleep(2)
            st.session_state.current_page = 'subscriptions'
            st.rerun()
        return
    
    # Versione semplificata dei prezzi dinamici
    st.title("üí∞ Prezzi Dinamici")
    
    # Pulsanti di navigazione
    col1, col2, col3 = st.columns([1, 1, 2])
    with col1:
        if st.button("üè† Home", key="price_home", use_container_width=True):
            st.session_state.current_page = 'home'
            st.rerun()
    with col2:
        if st.button("üîÑ Aggiorna", key="price_refresh", use_container_width=True):
            st.success("Dati aggiornati!")
    
    st.markdown("---")
    
    # Tabs per le diverse funzionalit√†
    tab_titles = ["Panoramica Prezzi", "Gestione Stagioni", "Ottimizzazione AI", "Monitoraggio Mercato"]
    tabs = st.tabs(tab_titles)
    
    with tabs[0]:  # Panoramica Prezzi
        st.subheader("Panoramica Prezzi")
        st.info("Qui potrai visualizzare e gestire i prezzi delle tue propriet√†.")
        
        # Esempio di tabella prezzi
        price_data = {
            'Propriet√†': ['Villa Marina', 'Appartamento Centro', 'Casa Giardino', 'Loft Moderno'],
            'Prezzo Base': [120, 80, 95, 110],
            'Prezzo Weekend': [150, 100, 120, 140],
            'Prezzo Alta Stagione': [180, 120, 140, 160],
            'Sconto Settimanale': ['10%', '15%', '10%', '5%']
        }
        price_df = pd.DataFrame(price_data)
        st.dataframe(price_df, use_container_width=True)
        
        # Grafico esempio
        st.subheader("Andamento Prezzi")
        chart_data = pd.DataFrame({
            'Mese': ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'],
            'Villa Marina': [120, 120, 130, 140, 150, 160, 180, 180, 160, 140, 130, 150],
            'Appartamento Centro': [80, 80, 85, 90, 100, 110, 120, 120, 110, 90, 85, 100]
        }).set_index('Mese')
        st.line_chart(chart_data)
    
    with tabs[1]:  # Gestione Stagioni
        st.subheader("Gestione Stagioni")
        st.info("Qui potrai definire le stagioni e i relativi prezzi.")
        
        # Esempio di stagioni
        seasons_data = {
            'Stagione': ['Bassa', 'Media', 'Alta', 'Altissima'],
            'Periodo': ['Nov-Mar', 'Apr-Mag, Ott', 'Giu, Set', 'Lug-Ago'],
            'Moltiplicatore': ['1.0x', '1.2x', '1.5x', '2.0x']
        }
        seasons_df = pd.DataFrame(seasons_data)
        st.dataframe(seasons_df, use_container_width=True)
        
        # Form di esempio
        with st.form("season_form"):
            st.selectbox("Stagione", ["Bassa", "Media", "Alta", "Altissima"])
            st.date_input("Data Inizio")
            st.date_input("Data Fine")
            st.number_input("Moltiplicatore Prezzo", min_value=1.0, max_value=3.0, value=1.5, step=0.1)
            
            if st.form_submit_button("Salva Stagione"):
                st.success("Stagione salvata con successo!")
    
    with tabs[2]:  # Ottimizzazione AI
        st.subheader("Ottimizzazione AI")
        st.info("Qui potrai utilizzare l'intelligenza artificiale per ottimizzare i prezzi.")
        
        st.markdown("### Suggerimenti AI")
        st.markdown("Basandoci sui dati di mercato e sulle tue performance storiche, suggeriamo:")
        
        suggestions = [
            "Aumenta i prezzi del 15% nei weekend di Giugno",
            "Riduci i prezzi infrasettimanali di Novembre del 10%",
            "Offri uno sconto del 20% per soggiorni di almeno 7 notti in Bassa Stagione"
        ]
        
        for i, suggestion in enumerate(suggestions):
            col1, col2 = st.columns([4, 1])
            with col1:
                st.info(suggestion)
            with col2:
                if st.button("Applica", key=f"apply_{i}"):
                    st.success("Suggerimento applicato!")
        
        st.markdown("### Analisi Competitiva")
        st.markdown("Le tue propriet√† rispetto alla concorrenza:")
        
        comp_data = {
            'Propriet√†': ['Villa Marina', 'Appartamento Centro'],
            'Tuo Prezzo': ['‚Ç¨120', '‚Ç¨80'],
            'Prezzo Medio Concorrenza': ['‚Ç¨135', '‚Ç¨75'],
            'Suggerimento': ['Aumenta', 'Mantieni']
        }
        comp_df = pd.DataFrame(comp_data)
        st.dataframe(comp_df, use_container_width=True)
    
    with tabs[3]:  # Monitoraggio Mercato
        st.subheader("Monitoraggio Mercato")
        st.info("Qui potrai monitorare i trend di mercato nella tua zona.")
        
        st.markdown("### Trend di Prezzo per Zona")
        trend_data = pd.DataFrame({
            'Mese': ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'],
            'Centro': [100, 105, 110, 115, 120, 125],
            'Periferia': [70, 72, 75, 78, 80, 82],
            'Mare': [150, 155, 160, 170, 180, 200]
        }).set_index('Mese')
        st.line_chart(trend_data)
        
        st.markdown("### Eventi Locali")
        events_data = {
            'Data': ['15/06/2023', '20/07/2023', '10/08/2023'],
            'Evento': ['Festival Musicale', 'Mostra d\'Arte', 'Sagra Locale'],
            'Impatto Previsto': ['Alto', 'Medio', 'Basso'],
            'Suggerimento': ['Aumenta prezzi del 25%', 'Aumenta prezzi del 15%', 'Nessuna azione']
        }
        events_df = pd.DataFrame(events_data)
        st.dataframe(events_df, use_container_width=True)

def show_fiscal_management_page():
    # Aggiungi CSS specifico per questa pagina
    st.markdown("""
    <style>
        /* Force light theme for this page */
        .main .block-container {
            background-color: white !important;
        }
        
        /* Style for buttons in this page */
        .stButton button {
            background-color: #4361ee !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
            padding: 8px 16px !important;
            font-weight: 500 !important;
        }
        
        /* Style for dataframes in this page */
        .dataframe {
            background-color: white !important;
            color: #333333 !important;
            border-collapse: collapse !important;
            width: 100% !important;
        }
        
        /* Style for tabs in this page */
        .stTabs [data-baseweb="tab"] {
            background-color: white !important;
            color: #333333 !important;
            font-weight: 500 !important;
        }
        
        /* Style for tab content in this page */
        .stTabs [data-baseweb="tab-panel"] {
            background-color: white !important;
            color: #333333 !important;
            padding: 16px !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Verifica se l'utente ha un abbonamento attivo
    if not st.session_state.get('subscription_purchased', False):
        st.warning("Per accedere alla gestione fiscale √® necessario acquistare un piano di abbonamento.")
        # Mostra un messaggio di attesa e poi reindirizza
        with st.spinner("Reindirizzamento alla pagina dei piani di abbonamento..."):
            time.sleep(2)
            st.session_state.current_page = 'subscriptions'
            st.rerun()
        return
    
    st.header("üßæ Gestione Fiscale")
    
    # Create tabs for different fiscal management functions
    tabs = st.tabs(["Gestione Utenti", "Fatturazione", "Reportistica Fiscale", "Impostazioni"])
    
    with tabs[0]:
        show_user_management()
    
    with tabs[1]:
        show_invoicing()
    
    with tabs[2]:
        show_fiscal_reporting()
    
    with tabs[3]:
        show_fiscal_settings()

def show_user_management():
    """Display and manage users from the database"""
    st.subheader("Gestione Utenti")
    
    # Get users from session state
    users = st.session_state.users
    
    if not users:
        st.info("Non ci sono utenti registrati nel sistema.")
        return
    
    # Create a dataframe for display
    user_data = []
    for i, (email, _) in enumerate(users.items(), 1):
        # Extract username from email
        username = email.split('@')[0] if '@' in email else email
        
        # Generate a fiscal ID (simulated)
        fiscal_id = f"USR{i:04d}"
        
        user_data.append({
            "ID": fiscal_id,
            "Email": email,
            "Username": username,
            "Data Registrazione": "21/05/2025",  # Simulated date
            "Stato": "Attivo"
        })
    
    # Create a dataframe
    user_df = pd.DataFrame(user_data)
    
    # Add search functionality
    search_term = st.text_input("Cerca utente:", placeholder="Inserisci email o username")
    
    if search_term:
        filtered_df = user_df[
            user_df["Email"].str.contains(search_term, case=False) | 
            user_df["Username"].str.contains(search_term, case=False)
        ]
        if filtered_df.empty:
            st.warning(f"Nessun utente trovato per '{search_term}'")
            st.dataframe(user_df, use_container_width=True)
        else:
            st.dataframe(filtered_df, use_container_width=True)
    else:
        st.dataframe(user_df, use_container_width=True)
    
    # User details section
    st.subheader("Dettagli Utente")
    
    # Select a user to view details
    selected_user = st.selectbox(
        "Seleziona un utente",
        options=user_df["Email"].tolist(),
        format_func=lambda x: f"{x} ({next((u['Username'] for u in user_data if u['Email'] == x), '')})"
    )
    
    if selected_user:
        selected_user_data = next((u for u in user_data if u["Email"] == selected_user), None)
        
        if selected_user_data:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**ID Fiscale:** {selected_user_data['ID']}")
                st.markdown(f"**Email:** {selected_user_data['Email']}")
                st.markdown(f"**Username:** {selected_user_data['Username']}")
            
            with col2:
                st.markdown(f"**Data Registrazione:** {selected_user_data['Data Registrazione']}")
                st.markdown(f"**Stato:** {selected_user_data['Stato']}")
                st.markdown(f"**Tipo Account:** {'Standard' if selected_user_data['Email'] != 'admin' else 'Amministratore'}")
            
            # Fiscal actions
            st.subheader("Azioni Fiscali")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("Genera Fattura", key=f"gen_invoice_{selected_user_data['ID']}"):
                    st.success(f"Fattura generata per {selected_user_data['Username']}")
            
            with col2:
                if st.button("Esporta Dati Fiscali", key=f"export_{selected_user_data['ID']}"):
                    st.success(f"Dati fiscali esportati per {selected_user_data['Username']}")
            
            with col3:
                if st.button("Invia Promemoria", key=f"remind_{selected_user_data['ID']}"):
                    st.success(f"Promemoria inviato a {selected_user_data['Email']}")

def show_invoicing():
    """Display invoicing functionality"""
    st.subheader("Fatturazione")
    st.info("Questa sezione permetterebbe di gestire la fatturazione per gli utenti.")
    
    # Simulated invoicing data
    if 'invoices' not in st.session_state:
        st.session_state.invoices = [
            {
                "id": "INV001",
                "user_email": next(iter(st.session_state.users.keys()), "esempio@email.com"),
                "amount": 100.0,
                "date": "15/05/2025",
                "status": "Pagata"
            }
        ]
    
    # Display invoices
    invoice_data = []
    for invoice in st.session_state.invoices:
        invoice_data.append({
            "ID": invoice["id"],
            "Utente": invoice["user_email"],
            "Importo": f"‚Ç¨{invoice['amount']:.2f}",
            "Data": invoice["date"],
            "Stato": invoice["status"]
        })
    
    if invoice_data:
        st.dataframe(pd.DataFrame(invoice_data), use_container_width=True)
    else:
        st.info("Nessuna fattura presente nel sistema.")

def show_fiscal_reporting():
    """Display fiscal reporting functionality"""
    st.subheader("Reportistica Fiscale")
    st.info("Questa sezione permetterebbe di generare report fiscali per gli utenti.")
    
    # Simulated reporting options
    report_type = st.selectbox(
        "Tipo di Report",
        ["Fatturazione Mensile", "Riepilogo Annuale", "Dichiarazione IVA", "Report Personalizzato"]
    )
    
    col1, col2 = st.columns(2)
    
    with col1:
        start_date = st.date_input("Data Inizio")
    
    with col2:
        end_date = st.date_input("Data Fine")
    
    if st.button("Genera Report"):
        st.success(f"Report {report_type} generato per il periodo {start_date} - {end_date}")
        
        # Simulated chart
        chart_data = pd.DataFrame({
            'Mese': ['Gen', 'Feb', 'Mar', 'Apr', 'Mag'],
            'Fatturato': [1200, 1350, 1800, 2200, 2100]
        })
        
        st.bar_chart(chart_data.set_index('Mese'))

def show_fiscal_settings():
    """Display fiscal settings functionality"""
    st.subheader("Impostazioni Fiscali")
    st.info("Questa sezione permetterebbe di configurare le impostazioni fiscali.")
    
    # Simulated settings
    col1, col2 = st.columns(2)
    
    with col1:
        st.text_input("Partita IVA", value="IT12345678901")
        st.text_input("Ragione Sociale", value="CiaoHost Srl")
        st.text_input("Indirizzo", value="Via Roma 123, Milano")
    
    with col2:
        st.selectbox("Regime Fiscale", ["Ordinario", "Forfettario", "Semplificato"])
        st.number_input("Aliquota IVA (%)", value=22)
        st.checkbox("Emetti Fattura Elettronica", value=True)
    
    if st.button("Salva Impostazioni"):
        st.success("Impostazioni fiscali salvate con successo")

def show_property_management_page():
    # Aggiungi CSS specifico per questa pagina
    st.markdown("""
    <style>
        /* Force light theme for this page */
        .main .block-container {
            background-color: white !important;
        }
        
        /* Style for buttons in this page */
        .stButton button {
            background-color: #4361ee !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
            padding: 8px 16px !important;
            font-weight: 500 !important;
        }
        
        /* Style for dataframes in this page */
        .dataframe {
            background-color: white !important;
            color: #333333 !important;
            border-collapse: collapse !important;
            width: 100% !important;
        }
        
        /* Style for tabs in this page */
        .stTabs [data-baseweb="tab"] {
            background-color: white !important;
            color: #333333 !important;
            font-weight: 500 !important;
        }
        
        /* Style for tab content in this page */
        .stTabs [data-baseweb="tab-panel"] {
            background-color: white !important;
            color: #333333 !important;
            padding: 16px !important;
        }
        
        /* Style for inputs in this page */
        .stNumberInput, .stTextInput, .stTextArea, .stSelectbox, .stMultiselect {
            background-color: white !important;
            color: #333333 !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Verifica se l'utente ha un abbonamento attivo
    if not st.session_state.get('subscription_purchased', False):
        st.warning("Per accedere alla gestione propriet√† √® necessario acquistare un piano di abbonamento.")
        # Mostra un messaggio di attesa e poi reindirizza
        with st.spinner("Reindirizzamento alla pagina dei piani di abbonamento..."):
            time.sleep(2)
            st.session_state.current_page = 'subscriptions'
            st.rerun()
        return
    
    # Versione semplificata della gestione propriet√†
    st.title("üè† Gestione Propriet√†")
    
    # Pulsanti di navigazione
    col1, col2, col3 = st.columns([1, 1, 2])
    with col1:
        if st.button("üè† Home", key="prop_home", use_container_width=True):
            st.session_state.current_page = 'home'
            st.rerun()
    with col2:
        if st.button("üîÑ Aggiorna", key="prop_refresh", use_container_width=True):
            st.success("Dati aggiornati!")
    
    st.markdown("---")
    
    # Tabs per le diverse funzionalit√†
    tab_titles = ["Le Mie Propriet√†", "Aggiungi Propriet√†", "Manutenzione", "Documenti"]
    tabs = st.tabs(tab_titles)
    
    with tabs[0]:  # Le Mie Propriet√†
        st.subheader("Le Mie Propriet√†")
        
        # Esempio di propriet√†
        properties_data = {
            'Nome': ['Villa Marina', 'Appartamento Centro', 'Casa Giardino', 'Loft Moderno'],
            'Tipo': ['Villa', 'Appartamento', 'Casa', 'Loft'],
            'Localit√†': ['Rimini', 'Bologna', 'Firenze', 'Milano'],
            'Camere': [3, 1, 2, 1],
            'Bagni': [2, 1, 2, 1],
            'Prezzo': ['‚Ç¨120', '‚Ç¨80', '‚Ç¨95', '‚Ç¨110'],
            'Stato': ['Attivo', 'Attivo', 'Attivo', 'In Manutenzione']
        }
        properties_df = pd.DataFrame(properties_data)
        st.dataframe(properties_df, use_container_width=True)
        
        # Azioni per propriet√† selezionata
        st.subheader("Azioni")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            if st.button("Modifica", key="edit_prop"):
                st.info("Funzionalit√† di modifica in arrivo!")
        with col2:
            if st.button("Calendario", key="calendar_prop"):
                st.info("Funzionalit√† di calendario in arrivo!")
        with col3:
            if st.button("Statistiche", key="stats_prop"):
                st.info("Funzionalit√† di statistiche in arrivo!")
        with col4:
            if st.button("Disattiva", key="deactivate_prop"):
                st.info("Funzionalit√† di disattivazione in arrivo!")
    
    with tabs[1]:  # Aggiungi Propriet√†
        st.subheader("Aggiungi Nuova Propriet√†")
        
        # Form di esempio
        with st.form("property_form"):
            st.text_input("Nome Propriet√†")
            st.selectbox("Tipo", ["Appartamento", "Villa", "Casa", "Loft", "Altro"])
            st.text_input("Indirizzo")
            st.text_input("Citt√†")
            
            col1, col2 = st.columns(2)
            with col1:
                st.number_input("Camere da letto", min_value=1, max_value=10, value=1)
            with col2:
                st.number_input("Bagni", min_value=1.0, max_value=10.0, value=1.0, step=0.5)
            
            st.number_input("Prezzo per notte (‚Ç¨)", min_value=10, max_value=1000, value=80)
            st.multiselect("Servizi", ["Wi-Fi", "Aria Condizionata", "Piscina", "Parcheggio", "Cucina", "TV", "Lavatrice"])
            st.text_area("Descrizione")
            
            if st.form_submit_button("Aggiungi Propriet√†"):
                st.success("Propriet√† aggiunta con successo!")
    
    with tabs[2]:  # Manutenzione
        st.subheader("Manutenzione Propriet√†")
        
        # Esempio di interventi di manutenzione
        maintenance_data = {
            'Propriet√†': ['Villa Marina', 'Loft Moderno', 'Appartamento Centro'],
            'Tipo Intervento': ['Riparazione Idraulica', 'Pittura', 'Sostituzione Elettrodomestici'],
            'Data': ['10/05/2023', '15/06/2023', '20/07/2023'],
            'Stato': ['Completato', 'Programmato', 'In Corso'],
            'Costo': ['‚Ç¨250', '‚Ç¨500', '‚Ç¨800']
        }
        maintenance_df = pd.DataFrame(maintenance_data)
        st.dataframe(maintenance_df, use_container_width=True)
        
        # Form per nuovo intervento
        st.subheader("Programma Nuovo Intervento")
        with st.form("maintenance_form"):
            st.selectbox("Propriet√†", ["Villa Marina", "Appartamento Centro", "Casa Giardino", "Loft Moderno"])
            st.text_input("Tipo Intervento")
            st.date_input("Data Programmata")
            st.number_input("Costo Stimato (‚Ç¨)", min_value=0, max_value=10000, value=100)
            st.text_area("Note")
            
            if st.form_submit_button("Programma Intervento"):
                st.success("Intervento programmato con successo!")
    
    with tabs[3]:  # Documenti
        st.subheader("Documenti Propriet√†")
        
        # Esempio di documenti
        documents_data = {
            'Propriet√†': ['Villa Marina', 'Villa Marina', 'Appartamento Centro', 'Casa Giardino'],
            'Documento': ['Contratto Locazione', 'Certificato Energetico', 'Contratto Locazione', 'Planimetria'],
            'Data Caricamento': ['01/01/2023', '15/01/2023', '10/02/2023', '05/03/2023'],
            'Scadenza': ['31/12/2023', '15/01/2028', '10/02/2024', 'N/A']
        }
        documents_df = pd.DataFrame(documents_data)
        st.dataframe(documents_df, use_container_width=True)
        
        # Upload nuovo documento
        st.subheader("Carica Nuovo Documento")
        col1, col2 = st.columns(2)
        with col1:
            st.selectbox("Propriet√† per Nuovo Documento", ["Villa Marina", "Appartamento Centro", "Casa Giardino", "Loft Moderno"])
        with col2:
            st.selectbox("Tipo Documento", ["Contratto Locazione", "Certificato Energetico", "Planimetria", "Inventario", "Altro"])
        
        st.file_uploader("Carica Documento", type=["pdf", "doc", "docx", "jpg", "png"])
        
        if st.button("Carica"):
            st.success("Documento caricato con successo!")

def show_report_builder_page():
    # Aggiungi CSS specifico per questa pagina
    st.markdown("""
    <style>
        /* Force light theme for this page */
        .main .block-container {
            background-color: white !important;
        }
        
        /* Style for buttons in this page */
        .stButton button {
            background-color: #4361ee !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
            padding: 8px 16px !important;
            font-weight: 500 !important;
        }
        
        /* Style for dataframes in this page */
        .dataframe {
            background-color: white !important;
            color: #333333 !important;
            border-collapse: collapse !important;
            width: 100% !important;
        }
        
        /* Style for tabs in this page */
        .stTabs [data-baseweb="tab"] {
            background-color: white !important;
            color: #333333 !important;
            font-weight: 500 !important;
        }
        
        /* Style for tab content in this page */
        .stTabs [data-baseweb="tab-panel"] {
            background-color: white !important;
            color: #333333 !important;
            padding: 16px !important;
        }
        
        /* Style for inputs in this page */
        .stNumberInput, .stTextInput, .stTextArea, .stSelectbox, .stMultiselect {
            background-color: white !important;
            color: #333333 !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Verifica se l'utente ha un abbonamento attivo
    if not st.session_state.get('subscription_purchased', False):
        st.warning("Per accedere alla creazione report √® necessario acquistare un piano di abbonamento.")
        # Mostra un messaggio di attesa e poi reindirizza
        with st.spinner("Reindirizzamento alla pagina dei piani di abbonamento..."):
            time.sleep(2)
            st.session_state.current_page = 'subscriptions'
            st.rerun()
        return
    
    # Importa e chiama la funzione dal modulo report_builder
    from attached_assets.report_builder import show_report_builder
    show_report_builder()

def show_settings_page():
    # Aggiungi CSS specifico per questa pagina
    st.markdown("""
    <style>
        /* Force light theme for this page */
        .main .block-container {
            background-color: white !important;
        }
        
        /* Style for buttons in this page */
        .stButton button {
            background-color: #4361ee !important;
            color: white !important;
            border: none !important;
            border-radius: 4px !important;
            padding: 8px 16px !important;
            font-weight: 500 !important;
        }
        
        /* Style for dataframes in this page */
        .dataframe {
            background-color: white !important;
            color: #333333 !important;
            border-collapse: collapse !important;
            width: 100% !important;
        }
        
        /* Style for tabs in this page */
        .stTabs [data-baseweb="tab"] {
            background-color: white !important;
            color: #333333 !important;
            font-weight: 500 !important;
        }
        
        /* Style for tab content in this page */
        .stTabs [data-baseweb="tab-panel"] {
            background-color: white !important;
            color: #333333 !important;
            padding: 16px !important;
        }
        
        /* Style for inputs in this page */
        .stNumberInput, .stTextInput, .stTextArea, .stSelectbox, .stMultiselect {
            background-color: white !important;
            color: #333333 !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Verifica se l'utente ha un abbonamento attivo
    if not st.session_state.get('subscription_purchased', False):
        st.warning("Per accedere alle impostazioni √® necessario acquistare un piano di abbonamento.")
        # Mostra un messaggio di attesa e poi reindirizza
        with st.spinner("Reindirizzamento alla pagina dei piani di abbonamento..."):
            time.sleep(2)
            st.session_state.current_page = 'subscriptions'
            st.rerun()
        return
    
    settings.show_settings()

# Funzione per il tema chiaro/scuro
def setup_theme():
    # Imposta sempre il tema chiaro
    st.session_state.theme = 'light'
    
    # CSS per il tema chiaro/scuro
    light_theme = """
    :root {
        --background-color: #f8f9fa;
        --text-color: #212529;
        --card-bg-color: #ffffff;
        --border-color: #dee2e6;
        --primary-color: #4361ee;
        --secondary-color: #6c757d;
        --success-color: #28a745;
        --info-color: #4cc9f0;
        --warning-color: #ff9800;
        --danger-color: #dc3545;
    }
    
    body {
        background-color: var(--background-color) !important;
        color: var(--text-color) !important;
    }
    
    .stApp {
        background-color: var(--background-color) !important;
    }
    
    /* Miglioramenti per i controlli di input */
    .stTextInput input, .stNumberInput input, .stDateInput input, .stTimeInput input, .stTextArea textarea {
        background-color: white !important;
        border-color: var(--border-color) !important;
        color: #212529 !important;
    }
    
    /* Miglioramenti per i pulsanti */
    .stButton button {
        background-color: white !important;
        color: #212529 !important;
        border: 1px solid #dee2e6 !important;
    }
    
    .stButton button:hover {
        background-color: #f8f9fa !important;
        border-color: var(--primary-color) !important;
    }
    
    /* Miglioramenti per i selettori */
    .stSelectbox, .stMultiselect {
        background-color: white !important;
        color: #212529 !important;
    }
    
    /* Miglioramenti per i testi */
    h1, h2, h3, h4, h5, h6 {
        color: #212529 !important;
    }
    
    p, span, div, label {
        color: #212529 !important;
    }
    
    /* Eccezioni per elementi con colori specifici */
    .primary-text {
        color: var(--primary-color) !important;
    }
    
    .secondary-text {
        color: var(--secondary-color) !important;
    }
    
    /* Stile per l'header */
    .main-header {
        background-color: white !important;
        border-bottom: 1px solid #dee2e6 !important;
    }
    
    /* Stile per i link */
    a {
        color: var(--primary-color) !important;
    }
    
    a:hover {
        color: #2a4bdb !important;
    }
    
    /* Stile per i tab */
    button[role="tab"] {
        background-color: #f8f9fa !important;
        color: #212529 !important;
    }
    
    button[role="tab"][aria-selected="true"] {
        background-color: white !important;
        color: var(--primary-color) !important;
        border-bottom: 2px solid var(--primary-color) !important;
    }
    """
    
    dark_theme = """
    :root {
        --background-color: #1a1a1a;
        --text-color: #ffffff;
        --card-bg-color: #2d2d2d;
        --border-color: #444444;
        --primary-color: #6c8eff;
        --secondary-color: #d0d0d0;
        --success-color: #4caf50;
        --info-color: #64b5f6;
        --warning-color: #ffb74d;
        --danger-color: #f44336;
    }
    
    body {
        background-color: var(--background-color) !important;
        color: var(--text-color) !important;
    }
    
    .stApp {
        background-color: var(--background-color) !important;
    }
    
    /* Miglioramenti per i controlli di input */
    .stTextInput input, .stNumberInput input, .stDateInput input, .stTimeInput input, .stTextArea textarea {
        background-color: #333333 !important;
        border-color: var(--border-color) !important;
        color: white !important;
    }
    
    /* Miglioramenti per i pulsanti */
    .stButton button {
        background-color: #3a3a3a !important;
        color: white !important;
        border: 1px solid #555555 !important;
    }
    
    .stButton button:hover {
        background-color: #4a4a4a !important;
        border-color: var(--primary-color) !important;
    }
    
    /* Miglioramenti per i selettori */
    .stSelectbox, .stMultiselect {
        background-color: #333333 !important;
        color: white !important;
    }
    
    /* Miglioramenti per i testi */
    h1, h2, h3, h4, h5, h6 {
        color: white !important;
    }
    
    p, span, div, label {
        color: #e0e0e0 !important;
    }
    
    /* Eccezioni per elementi con colori specifici */
    .primary-text {
        color: var(--primary-color) !important;
    }
    
    .secondary-text {
        color: var(--secondary-color) !important;
    }
    
    /* Stile specifico per la sidebar */
    .stSidebar, [data-testid="stSidebar"], [data-testid="stSidebarNav"], .css-1d391kg, .css-1lcbmhc {
        background-color: #ffffff !important;
        border-right: 1px solid #dee2e6 !important;
    }
    
    /* Forza tutti gli elementi della sidebar ad avere sfondo bianco e testo scuro */
    .stSidebar *, [data-testid="stSidebar"] *, [data-testid="stSidebarNav"] * {
        background-color: #ffffff !important;
        color: #333333 !important;
    }
    
    /* Stile per l'header */
    .main-header {
        background-color: #ffffff !important;
        border-bottom: 1px solid #dee2e6 !important;
    }
    
    /* Stile per le card e i container */
    div[data-testid="stVerticalBlock"] > div {
        background-color: var(--card-bg-color) !important;
    }
    
    /* Stile per i link */
    a {
        color: var(--primary-color) !important;
    }
    
    a:hover {
        color: #8ca8ff !important;
    }
    
    /* Stile per i dataframe */
    .stDataFrame {
        background-color: #333333 !important;
    }
    
    /* Stile per i tab */
    button[role="tab"] {
        background-color: #333333 !important;
        color: #e0e0e0 !important;
    }
    
    button[role="tab"][aria-selected="true"] {
        background-color: #4a4a4a !important;
        color: white !important;
        border-bottom: 2px solid var(--primary-color) !important;
    }
    """
    
    # Applica il tema corrente
    if st.session_state.theme == 'light':
        st.markdown(f"<style>{light_theme}</style>", unsafe_allow_html=True)
    else:
        st.markdown(f"<style>{dark_theme}</style>", unsafe_allow_html=True)

def main():
    # Forza il tema chiaro
    st.set_page_config(
        page_title="CiaoHost AI Manager",
        page_icon="üè°",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Forza il tema chiaro con CSS aggiuntivo e migliora la GUI
    st.markdown("""
    <style>
        /* Base theme */
        html, body, [class*="css"], [data-testid="stSidebar"], [data-testid="stHeader"], [data-testid="stToolbar"],
        [data-testid="stSidebarNav"], [data-testid="stSidebarUserContent"], .stApp, .stTabs, .stTabContent {
            background-color: white !important;
            color: #333333 !important;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif !important;
        }
        
        /* Modern text styling */
        p, h1, h2, h3, h4, h5, h6, span, div, label, a, li, ul, ol, th, td {
            color: #333333 !important;
        }
        
        h1 {
            font-size: 2.5rem !important;
            font-weight: 700 !important;
            margin-bottom: 1.5rem !important;
            color: #2d3748 !important;
            letter-spacing: -0.5px !important;
        }
        
        h2 {
            font-size: 2rem !important;
            font-weight: 600 !important;
            margin-bottom: 1.2rem !important;
            color: #2d3748 !important;
        }
        
        h3 {
            font-size: 1.5rem !important;
            font-weight: 600 !important;
            margin-bottom: 1rem !important;
            color: #2d3748 !important;
        }
        
        /* Enhanced sidebar styling */
        [data-testid="stSidebar"] {
            background: linear-gradient(180deg, #ffffff 0%, #f8f9fa 100%) !important;
            border-right: 1px solid rgba(0,0,0,0.05) !important;
            box-shadow: 2px 0px 5px rgba(0,0,0,0.02) !important;
        }
        
        /* Modern sidebar buttons */
        [data-testid="stSidebar"] button {
            background-color: white !important;
            color: #4361ee !important;
            border: 1px solid rgba(67, 97, 238, 0.2) !important;
            border-radius: 8px !important;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05) !important;
            transition: all 0.3s ease !important;
            margin-bottom: 8px !important;
            font-weight: 500 !important;
            padding: 10px 15px !important;
        }
        
        [data-testid="stSidebar"] button:hover {
            background-color: #f0f4ff !important;
            border-color: #4361ee !important;
            transform: translateY(-2px) !important;
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.1) !important;
        }
        
        /* Modern table styling */
        table, [data-testid="stTable"], [data-testid="stDataFrame"], div[data-testid="stDataFrameContainer"] {
            background-color: white !important;
            border-radius: 10px !important;
            overflow: hidden !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05) !important;
            border: none !important;
        }
        
        /* Enhanced dataframe styling */
        .dataframe {
            width: 100% !important;
            border-collapse: separate !important;
            border-spacing: 0 !important;
            border-radius: 10px !important;
            overflow: hidden !important;
            font-family: 'Segoe UI', sans-serif !important;
        }
        
        /* Modern header styling */
        .dataframe th {
            background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
            color: white !important;
            font-weight: 600 !important;
            padding: 12px 16px !important;
            text-align: left !important;
            border: none !important;
            font-size: 14px !important;
            letter-spacing: 0.5px !important;
            text-transform: uppercase !important;
        }
        
        /* Modern cell styling */
        .dataframe td {
            background-color: white !important;
            color: #333333 !important;
            padding: 12px 16px !important;
            border-bottom: 1px solid #f0f0f0 !important;
            font-size: 14px !important;
            transition: background-color 0.2s ease !important;
        }
        
        /* Zebra striping with hover effect */
        .dataframe tr:nth-child(even) td {
            background-color: #f8f9fa !important;
        }
        
        .dataframe tr:hover td {
            background-color: #f0f4ff !important;
        }
        
        /* Modern tabs styling */
        .stTabs [data-baseweb="tab-list"] {
            background-color: white !important;
            border-radius: 10px !important;
            padding: 5px !important;
            box-shadow: 0 2px 10px rgba(0,0,0,0.03) !important;
            display: flex !important;
            justify-content: center !important;
            margin-bottom: 20px !important;
        }
        
        .stTabs [data-baseweb="tab"] {
            background-color: white !important;
            color: #4361ee !important;
            border-radius: 8px !important;
            margin: 0 5px !important;
            padding: 10px 20px !important;
            font-weight: 500 !important;
            transition: all 0.3s ease !important;
            border: 1px solid rgba(67, 97, 238, 0.1) !important;
        }
        
        .stTabs [data-baseweb="tab"]:hover {
            background-color: #f0f4ff !important;
            transform: translateY(-2px) !important;
        }
        
        .stTabs [data-baseweb="tab"][aria-selected="true"] {
            background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
            color: white !important;
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2) !important;
            border: none !important;
        }
        
        .stTabs [data-baseweb="tab-highlight"] {
            display: none !important;
        }
        
        .stTabs [data-baseweb="tab-panel"] {
            padding: 20px 0 !important;
        }
        
        /* Modern card styling */
        .stCard, [data-testid="stExpander"] {
            background-color: white !important;
            border-radius: 12px !important;
            box-shadow: 0 4px 20px rgba(0,0,0,0.05) !important;
            padding: 20px !important;
            border: none !important;
            transition: transform 0.3s ease, box-shadow 0.3s ease !important;
        }
        
        .stCard:hover, [data-testid="stExpander"]:hover {
            transform: translateY(-5px) !important;
            box-shadow: 0 8px 30px rgba(0,0,0,0.1) !important;
        }
        
        /* Modern input styling */
        input, textarea, [data-baseweb="input"], [data-baseweb="textarea"], [data-baseweb="select"], 
        .stNumberInput, .stTextInput, .stTextArea, .stSelectbox, .stMultiselect {
            background-color: white !important;
            color: #333333 !important;
            border: 1px solid #e2e8f0 !important;
            border-radius: 8px !important;
            padding: 10px 15px !important;
            box-shadow: 0 2px 5px rgba(0,0,0,0.02) !important;
            transition: all 0.3s ease !important;
        }
        
        input:focus, textarea:focus, [data-baseweb="input"]:focus, [data-baseweb="textarea"]:focus, [data-baseweb="select"]:focus {
            border-color: #4361ee !important;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2) !important;
            outline: none !important;
        }
        
        /* Modern alert styling */
        .stAlert {
            background-color: white !important;
            border-radius: 10px !important;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05) !important;
            padding: 15px 20px !important;
            margin: 15px 0 !important;
            border-left: 5px solid #4361ee !important;
        }
        
        /* Success alert */
        .stAlert[data-baseweb="notification"][kind="success"] {
            border-left-color: #10B981 !important;
        }
        
        /* Warning alert */
        .stAlert[data-baseweb="notification"][kind="warning"] {
            border-left-color: #F59E0B !important;
        }
        
        /* Error alert */
        .stAlert[data-baseweb="notification"][kind="error"] {
            border-left-color: #EF4444 !important;
        }
        
        /* Modern metric styling */
        [data-testid="stMetric"] {
            background-color: white !important;
            padding: 20px !important;
            border-radius: 12px !important;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05) !important;
            transition: transform 0.3s ease !important;
        }
        
        [data-testid="stMetric"]:hover {
            transform: translateY(-5px) !important;
        }
        
        [data-testid="stMetric"] label {
            color: #4361ee !important;
            font-weight: 600 !important;
            font-size: 1rem !important;
        }
        
        [data-testid="stMetric"] div[data-testid="stMetricValue"] {
            font-size: 2.5rem !important;
            font-weight: 700 !important;
            color: #2d3748 !important;
        }
        
        /* Modern plot styling */
        .stPlot, [data-testid="stPlotContainer"], .js-plotly-plot, .plotly, .plot-container {
            background-color: white !important;
            border-radius: 12px !important;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05) !important;
            padding: 10px !important;
        }
        
        /* Modern widget styling */
        .stSlider, .stSelectbox, .stMultiselect, .stDateInput, .stTimeInput, .stNumberInput, .stTextInput, .stTextArea {
            background-color: white !important;
            color: #333333 !important;
            margin-bottom: 20px !important;
        }
        
        /* Modern slider styling */
        .stSlider [data-baseweb="slider"] {
            height: 6px !important;
            background-color: #e2e8f0 !important;
        }
        
        .stSlider [data-baseweb="slider"] [data-testid="stThumbValue"] {
            background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
            border: none !important;
            box-shadow: 0 2px 8px rgba(67, 97, 238, 0.3) !important;
        }
        
        /* Modern expander styling */
        .streamlit-expanderHeader, .streamlit-expanderContent {
            background-color: white !important;
            color: #333333 !important;
            border-radius: 10px !important;
        }
        
        .streamlit-expanderHeader {
            border: 1px solid #e2e8f0 !important;
            padding: 15px 20px !important;
            font-weight: 600 !important;
            transition: all 0.3s ease !important;
        }
        
        .streamlit-expanderHeader:hover {
            background-color: #f0f4ff !important;
            border-color: #4361ee !important;
        }
        
        /* Modern radio and checkbox styling */
        .stRadio, .stCheckbox {
            background-color: white !important;
            color: #333333 !important;
            padding: 10px !important;
            border-radius: 10px !important;
        }
        
        .stRadio label, .stCheckbox label {
            font-weight: 500 !important;
        }
        
        /* Modern download button styling */
        .stDownloadButton button {
            background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
            color: white !important;
            border: none !important;
            border-radius: 8px !important;
            padding: 10px 20px !important;
            font-weight: 500 !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2) !important;
        }
        
        .stDownloadButton button:hover {
            transform: translateY(-2px) !important;
            box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3) !important;
        }
        
        /* Modern file uploader styling */
        .stFileUploader {
            background-color: white !important;
            color: #333333 !important;
            border: 2px dashed #e2e8f0 !important;
            border-radius: 10px !important;
            padding: 20px !important;
            transition: all 0.3s ease !important;
        }
        
        .stFileUploader:hover {
            border-color: #4361ee !important;
            background-color: #f0f4ff !important;
        }
        
        /* Modern progress bar styling */
        .stProgress > div {
            background-color: #e2e8f0 !important;
            height: 8px !important;
            border-radius: 4px !important;
        }
        
        .stProgress > div > div {
            background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
            border-radius: 4px !important;
        }
        
        /* Modern main navigation bar styling */
        .main-header {
            background: white !important;
            box-shadow: 0 4px 20px rgba(0,0,0,0.05) !important;
            border-radius: 12px !important;
            margin-bottom: 20px !important;
            padding: 15px 20px !important;
            display: flex !important;
            align-items: center !important;
            justify-content: space-between !important;
        }
        
        /* Main navigation buttons */
        .nav-buttons .stButton button {
            background-color: white !important;
            color: #4361ee !important;
            border: 1px solid rgba(67, 97, 238, 0.2) !important;
            border-radius: 8px !important;
            padding: 10px 15px !important;
            font-weight: 500 !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05) !important;
            margin: 0 5px !important;
        }
        
        .nav-buttons .stButton button:hover {
            background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
            color: white !important;
            transform: translateY(-2px) !important;
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2) !important;
            border-color: transparent !important;
        }
        
        /* Active navigation button */
        .nav-buttons .stButton button.active {
            background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
            color: white !important;
            border-color: transparent !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Imposta il tema
    setup_theme()
    if 'current_page' not in st.session_state:
        st.session_state.current_page = 'welcome'
    
    if 'data' not in st.session_state:
        data = {
            'Mese': ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu'],
            'Guadagno': [1200, 1350, 1800, 2200, 2100, 2400],
            'Occupazione': [75, 82, 88, 95, 93, 98],
            'Prenotazioni': [10, 12, 15, 18, 17, 20]
        }
        st.session_state.data = pd.DataFrame(data)
    
    # Carica il database
    # Inizializza le variabili di sessione se non esistono
    
    load_database()
    
    st.markdown("""
    <style>
        /* Force Light Theme */
        html, body, [class*="css"] {
            color: #333 !important;
            background-color: #ffffff !important;
        }
        
        /* Base Styles */
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #333 !important;
            background-color: #f8f9fa !important;
        }
        
        /* Force sidebar to be light */
        .css-1d391kg, .css-1lcbmhc, .css-12oz5g7, .css-zt5igj, .css-1oe6wy4, .css-1aehpvj, .css-18e3th9 {
            background-color: #ffffff !important;
            color: #333333 !important;
        }
        
        /* Force all text to be visible */
        p, h1, h2, h3, h4, h5, h6, span, div, label, .stMarkdown, .stText {
            color: #333333 !important;
        }
        
        /* Modern Color Scheme */
        :root {
            --primary-color: #4361ee;
            --primary-hover: #3a56d4;
            --secondary-color: #3f37c9;
            --accent-color: #4cc9f0;
            --success-color: #4CAF50;
            --warning-color: #ff9800;
            --danger-color: #f44336;
            --light-bg: #f8f9fa;
            --dark-bg: #212529;
            --border-color: #dee2e6;
        }
        
        /* Improved Chat Container */
        .stChatInputContainer {
            position: fixed;
            bottom: 0rem;
            left: 0;
            right: 0;
            padding: 0.75rem 1.5rem;
            background-color: white;
            border-top: 1px solid var(--border-color);
            box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
            z-index: 999;
            width: 100%;
            box-sizing: border-box;
        }
        
        /* Chat Message Styling */
        .stChatMessage {
            background-color: white !important;
            border-radius: 12px !important;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05) !important;
            padding: 12px !important;
            margin-bottom: 12px !important;
        }
        
        /* Main Container Padding */
        .main .block-container { 
            padding-bottom: 6rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        /* Enhanced Header */
        .main-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
            background-color: white;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            position: sticky;
            top: 0;
            z-index: 100;
        }
        
        /* Navigation Buttons Grid */
        .nav-buttons {
            display: grid !important;
            grid-template-columns: repeat(6, minmax(90px, 1fr)) !important;
            grid-gap: 8px !important;
            width: 100% !important;
            margin-left: auto !important;
        }
        
        /* Navigation Button Container */
        .nav-buttons > div {
            display: contents !important;
        }
        
        /* Navigation Button Column */
        .nav-buttons > div > div {
            margin: 0 !important;
            padding: 0 !important;
            height: auto !important;
        }
        
        /* Button Container */
        .nav-buttons .stButton {
            width: 100% !important;
            margin: 0 !important;
            padding: 0 !important;
        }
        
        /* Button Styling */
        .nav-buttons .stButton button {
            width: 100% !important;
            height: 42px !important;
            min-height: 42px !important;
            max-height: 42px !important;
            padding: 0 12px !important;
            white-space: nowrap !important;
            overflow: hidden !important;
            text-overflow: ellipsis !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            background-color: #4361ee !important;
            color: white !important;
            border-radius: 8px !important;
            border: none !important;
            font-weight: 500 !important;
            transition: all 0.2s ease !important;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1) !important;
        }
        
        /* Button Hover Effect */
        .nav-buttons .stButton button:hover {
            background-color: #3a56d4 !important;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15) !important;
            transform: translateY(-1px) !important;
        }
        
        /* Logout Button */
        .nav-buttons .stButton button.logout-btn,
        button[key*="logout"] {
            background-color: var(--danger-color) !important;
        }
        
        /* Logout Button Hover */
        .nav-buttons .stButton button.logout-btn:hover,
        button[key*="logout"]:hover {
            background-color: #d32f2f !important;
        }
        
        /* Sidebar Styling */
        .css-1d391kg, .css-163ttbj, .css-1wrcr25 {
            background-color: white !important;
            border-right: 1px solid var(--border-color) !important;
        }
        
        /* Sidebar Button Styling */
        .sidebar .stButton button, [data-testid="stSidebar"] .stButton button {
            background-color: #f8f9fa !important;
            color: #333333 !important;
            border: 1px solid #dee2e6 !important;
            border-radius: 8px !important;
            text-align: left !important;
            padding: 10px 15px !important;
            margin-bottom: 5px !important;
            transition: all 0.2s ease !important;
            display: flex !important;
            align-items: center !important;
            font-weight: 500 !important;
        }
        
        /* Sidebar Button Hover */
        .sidebar .stButton button:hover, [data-testid="stSidebar"] .stButton button:hover {
            background-color: #e9ecef !important;
            border-color: #4361ee !important;
            color: #4361ee !important;
        }
        
        /* Card Container Styling */
        .card-container {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--border-color);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .card-container:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        /* Metric Card Styling */
        .metric-card {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            padding: 15px;
            text-align: center;
            border: 1px solid var(--border-color);
        }
        
        /* Data Table Styling */
        .stDataFrame {
            border-radius: 10px !important;
            overflow: hidden !important;
            border: 1px solid var(--border-color) !important;
        }
        
        /* Expander Styling */
        .streamlit-expanderHeader {
            background-color: white !important;
            border-radius: 8px !important;
            border: 1px solid var(--border-color) !important;
            padding: 10px 15px !important;
            margin-bottom: 5px !important;
        }
        
        /* Expander Content */
        .streamlit-expanderContent {
            background-color: white !important;
            border-radius: 0 0 8px 8px !important;
            border: 1px solid var(--border-color) !important;
            border-top: none !important;
            padding: 15px !important;
        }
        
        /* Input Field Styling */
        .stTextInput input, .stNumberInput input, .stSelectbox, .stMultiselect {
            border-radius: 8px !important;
            border: 1px solid var(--border-color) !important;
            padding: 10px 15px !important;
        }
        
        /* Input Field Focus */
        .stTextInput input:focus, .stNumberInput input:focus {
            border-color: var(--primary-color) !important;
            box-shadow: 0 0 0 2px rgba(67, 97, 238, 0.2) !important;
        }
        
        /* Header Styling */
        h1, h2, h3, h4, h5, h6 {
            color: #212529 !important;
            font-weight: 600 !important;
        }
        
        /* Ensure the header maintains its layout with sidebar open */
        .main-header {
            width: 100% !important;
            max-width: 100% !important;
            padding: 0.75rem 1.5rem !important;
            box-sizing: border-box !important;
            display: flex !important;
            flex-wrap: wrap !important;
        }
    </style>
    """, unsafe_allow_html=True)

    st.markdown('<div class="main-header">', unsafe_allow_html=True)
    header_cols = st.columns([2, 3, 3])
    with header_cols[0]:
        # Logo pi√π semplice nell'header
        show_company_logo(size="small", with_text=True)
    
    with header_cols[1]:
        # Spazio vuoto
        st.markdown('<div class="title-container"></div>', unsafe_allow_html=True)

    with header_cols[2]:
        st.markdown('<div class="nav-buttons">', unsafe_allow_html=True)
        if st.session_state.get('is_authenticated', False) and st.session_state.current_page != 'dashboard':
            nav_cols = st.columns(6)
            if nav_cols[0].button("üè† Home", key="nav_home"):
                st.session_state.current_page = 'home'
                st.rerun()
            if nav_cols[1].button("ü§ñ AI Chat", key="nav_ai"):
                st.session_state.current_page = 'ai'
                st.rerun()
            if nav_cols[2].button("üîç Ricerca", key="nav_search"):
                st.session_state.current_page = 'search_properties'
                st.rerun()
            if nav_cols[3].button("üíº Piani", key="nav_sub"):
                st.session_state.current_page = 'subscriptions'
                st.rerun()
            if nav_cols[4].button("üìä Dashboard", key="nav_dashboard"):
                # Assicuriamoci che l'abbonamento sia attivo
                if 'subscription_purchased' not in st.session_state:
                    st.session_state.subscription_purchased = True
                st.session_state.current_page = 'dashboard'
                st.rerun()
            if nav_cols[5].button("üö™ Logout", key="nav_logout"):
                st.session_state.is_authenticated = False
                st.session_state.current_page = 'login'
                st.session_state.messages = []
                st.session_state.admin_state = {'mode': None, 'step': None}
                st.session_state.subscription_purchased = False
                st.session_state.current_user_email = None
                st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

    # Sidebar Navigation
    if st.session_state.get('is_authenticated', False):
        with st.sidebar:
            # CSS per la sidebar moderna
            st.markdown("""
            <style>
                /* Modern sidebar styling */
                [data-testid="stSidebar"] {
                    background: linear-gradient(180deg, #ffffff 0%, #f8f9fa 100%) !important;
                    border-right: 1px solid rgba(0,0,0,0.05) !important;
                    box-shadow: 2px 0px 10px rgba(0,0,0,0.03) !important;
                }
                
                /* Sidebar content container */
                [data-testid="stSidebar"] > div:first-child {
                    padding: 2rem 1.5rem !important;
                }
                
                /* Sidebar header */
                .sidebar-header {
                    text-align: center;
                    margin-bottom: 2rem;
                    padding-bottom: 1.5rem;
                    border-bottom: 1px solid rgba(0,0,0,0.05);
                }
                
                /* Logo container */
                .logo-container {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    margin-bottom: 1rem;
                }
                
                /* App title */
                .app-title {
                    color: #4361ee !important;
                    font-size: 1.8rem !important;
                    font-weight: 700 !important;
                    margin-top: 0.5rem !important;
                    letter-spacing: -0.5px !important;
                    background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%) !important;
                    -webkit-background-clip: text !important;
                    -webkit-text-fill-color: transparent !important;
                }
                
                /* Navigation section */
                .nav-section {
                    margin-bottom: 1.5rem;
                }
                
                /* Section title */
                .section-title {
                    color: #2d3748 !important;
                    font-size: 1.2rem !important;
                    font-weight: 600 !important;
                    margin-bottom: 1rem !important;
                    padding-left: 0.5rem !important;
                    border-left: 3px solid #4361ee !important;
                }
                
                /* Navigation buttons */
                [data-testid="stSidebar"] button {
                    background-color: white !important;
                    color: #4361ee !important;
                    border: 1px solid rgba(67, 97, 238, 0.2) !important;
                    border-radius: 8px !important;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.05) !important;
                    transition: all 0.3s ease !important;
                    margin-bottom: 8px !important;
                    font-weight: 500 !important;
                    padding: 10px 15px !important;
                    text-align: left !important;
                    display: flex !important;
                    align-items: center !important;
                }
                
                [data-testid="stSidebar"] button:hover {
                    background-color: #f0f4ff !important;
                    border-color: #4361ee !important;
                    transform: translateY(-2px) !important;
                    box-shadow: 0 4px 8px rgba(67, 97, 238, 0.1) !important;
                }
                
                /* Divider */
                .sidebar-divider {
                    height: 1px;
                    background: linear-gradient(90deg, rgba(0,0,0,0.03) 0%, rgba(0,0,0,0.06) 50%, rgba(0,0,0,0.03) 100%);
                    margin: 1.5rem 0;
                    border: none;
                }
            </style>
            """, unsafe_allow_html=True)
            
            # Header della sidebar
            st.markdown('<div class="sidebar-header">', unsafe_allow_html=True)
            st.markdown('<div class="logo-container">', unsafe_allow_html=True)
            
            # Logo
            show_company_logo(size="small", with_text=False)
            st.markdown('<h1 class="app-title">CiaoHost</h1>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Sottotitolo
            st.markdown('<p style="text-align: center; color: #718096; margin-top: -0.5rem;">Gestione Propriet√† Intelligente</p>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Sezione Funzionalit√† Base
            st.markdown('<div class="nav-section">', unsafe_allow_html=True)
            st.markdown('<h3 class="section-title">Funzionalit√† Base</h3>', unsafe_allow_html=True)
            
            # Determina quale pagina √® attiva
            is_home_active = st.session_state.current_page == 'home'
            is_ai_active = st.session_state.current_page == 'ai'
            is_search_active = st.session_state.current_page == 'search_properties'
            is_subscriptions_active = st.session_state.current_page == 'subscriptions'
            
            # Pulsanti con indicatore di attivo
            if st.button("üè† Home Principale", key="sidebar_home", 
                        help="Torna alla pagina principale", use_container_width=True):
                st.session_state.current_page = 'home'
                st.rerun()
                
            if st.button("ü§ñ Assistente AI", key="sidebar_ai", 
                        help="Accedi all'assistente AI", use_container_width=True):
                st.session_state.current_page = 'ai'
                st.rerun()
                
            if st.button("üîç Ricerca Immobili", key="sidebar_search", 
                        help="Cerca tra le propriet√† disponibili", use_container_width=True):
                st.session_state.current_page = 'search_properties'
                st.rerun()
                
            if st.button("üíº Piani Abbonamento", key="sidebar_subscriptions", 
                        help="Visualizza i piani di abbonamento disponibili", use_container_width=True):
                st.session_state.current_page = 'subscriptions'
                st.rerun()
                
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Sezione visibile solo con abbonamento attivo
            if st.session_state.get('subscription_purchased', False):
                # Aggiungi un divisore
                st.markdown('<hr class="sidebar-divider">', unsafe_allow_html=True)
                
                # Sezione Funzionalit√† Premium
                st.markdown('<div class="nav-section">', unsafe_allow_html=True)
                st.markdown('<h3 class="section-title">Funzionalit√† Premium</h3>', unsafe_allow_html=True)
                
                # Determina se dashboard √® attiva
                is_dashboard_active = st.session_state.current_page == 'dashboard'
                
                # Dashboard (spostata qui perch√© richiede abbonamento)
                if st.button("üìä Dashboard Dati", key="sidebar_dashboard", 
                            help="Visualizza la dashboard con i dati delle tue propriet√†", use_container_width=True):
                    # Assicuriamoci che l'abbonamento sia attivo
                    if 'subscription_purchased' not in st.session_state:
                        st.session_state.subscription_purchased = True
                    
                    st.session_state.current_page = 'dashboard'
                    st.rerun()
                
                st.markdown('</div>', unsafe_allow_html=True)
                
                # Aggiungi un divisore
                st.markdown('<hr class="sidebar-divider">', unsafe_allow_html=True)
                
                # Sezione Strumenti Gestionali
                st.markdown('<div class="nav-section">', unsafe_allow_html=True)
                st.markdown('<h3 class="section-title">Strumenti Gestionali</h3>', unsafe_allow_html=True)
                
                # Determina quali strumenti sono attivi
                is_cleaning_active = st.session_state.current_page == 'cleaning_management'
                is_pricing_active = st.session_state.current_page == 'dynamic_pricing'
                is_fiscal_active = st.session_state.current_page == 'fiscal_management'
                is_property_active = st.session_state.current_page == 'property_management'
                is_report_active = st.session_state.current_page == 'report_builder'
                is_settings_active = st.session_state.current_page == 'settings'
                
                # Pulsanti con indicatore di attivo
                if st.button("üßπ Gestione Pulizie", key="sidebar_cleaning", 
                            help="Gestisci le pulizie delle tue propriet√†", use_container_width=True):
                    st.session_state.current_page = 'cleaning_management'
                    st.rerun()
                    
                if st.button("‚öñÔ∏è Prezzi Dinamici", key="sidebar_dynamic_pricing", 
                            help="Imposta prezzi dinamici per le tue propriet√†", use_container_width=True):
                    st.session_state.current_page = 'dynamic_pricing'
                    st.rerun()
                    
                if st.button("üßæ Gestione Fiscale", key="sidebar_fiscal_management", 
                            help="Gestisci gli aspetti fiscali delle tue propriet√†", use_container_width=True):
                    st.session_state.current_page = 'fiscal_management'
                    st.rerun()
                    
                if st.button("üèòÔ∏è Gestione Propriet√†", key="sidebar_property_management", 
                            help="Gestisci le tue propriet√†", use_container_width=True):
                    st.session_state.current_page = 'property_management'
                    st.rerun()
                    
                if st.button("üìÑ Creazione Report", key="sidebar_report_builder", 
                            help="Crea report personalizzati", use_container_width=True):
                    st.session_state.current_page = 'report_builder'
                    st.rerun()
                    
                if st.button("‚öôÔ∏è Impostazioni", key="sidebar_settings", 
                            help="Configura le impostazioni dell'applicazione", use_container_width=True):
                    st.session_state.current_page = 'settings'
                    st.rerun()
                    
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                # Messaggio per utenti senza abbonamento
                st.markdown('<hr class="sidebar-divider">', unsafe_allow_html=True)
                st.markdown("""
                <div style="background: linear-gradient(135deg, #f6f9ff 0%, #f0f4ff 100%); 
                            padding: 15px; 
                            border-radius: 10px; 
                            border-left: 4px solid #4361ee;
                            margin: 10px 0;">
                    <p style="margin: 0; color: #333333; font-weight: 500;">
                        üëë <span style="font-weight: 600;">Sblocca funzionalit√† premium</span><br>
                        Acquista un piano di abbonamento per accedere a tutti gli strumenti gestionali avanzati.
                    </p>
                </div>
                """, unsafe_allow_html=True)

            # Aggiungi un divisore
            st.markdown('<hr class="sidebar-divider">', unsafe_allow_html=True)
            
            # Sezione Account
            st.markdown('<div class="nav-section">', unsafe_allow_html=True)
            
            # Pulsante di logout
            if st.button("üö™ Logout", key="sidebar_logout", 
                        help="Esci dall'applicazione", use_container_width=True):
                st.session_state.is_authenticated = False
                st.session_state.current_page = 'login'
                st.session_state.messages = []
                st.session_state.admin_state = {'mode': None, 'step': None}
                st.session_state.subscription_purchased = False
                st.session_state.current_user_email = None
                st.rerun()
                
            st.markdown('</div>', unsafe_allow_html=True)

    if not st.session_state.get('is_authenticated', False):
        show_login()
    else:
        # Page rendering logic based on st.session_state.current_page
        if st.session_state.current_page == 'home':
            # Hero section moderna con effetto gradiente e animazione
            st.markdown("""
                <style>
                    @keyframes gradientAnimation {
                        0% {background-position: 0% 50%;}
                        50% {background-position: 100% 50%;}
                        100% {background-position: 0% 50%;}
                    }
                    
                    .hero-section {
                        background: linear-gradient(-45deg, #4361ee, #3a56d4, #4895ef, #4cc9f0);
                        background-size: 400% 400%;
                        animation: gradientAnimation 15s ease infinite;
                        padding: 4rem 2rem;
                        border-radius: 16px;
                        text-align: center;
                        margin-bottom: 2rem;
                        box-shadow: 0 10px 30px rgba(67, 97, 238, 0.15);
                    }
                    
                    .hero-title {
                        font-size: 3rem;
                        font-weight: 800;
                        margin-bottom: 1.5rem;
                        color: white;
                        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    
                    .hero-subtitle {
                        font-size: 1.3rem;
                        color: rgba(255,255,255,0.9);
                        margin-bottom: 2.5rem;
                        max-width: 700px;
                        margin-left: auto;
                        margin-right: auto;
                        line-height: 1.6;
                    }
                    
                    .hero-badge {
                        display: inline-block;
                        background-color: rgba(255,255,255,0.2);
                        color: white;
                        padding: 0.5rem 1rem;
                        border-radius: 50px;
                        margin: 0 0.5rem 1rem 0.5rem;
                        font-weight: 500;
                        backdrop-filter: blur(5px);
                    }
                </style>
                
                <div class="hero-section">
                    <h1 class="hero-title">CiaoHost Manager</h1>
                    <p class="hero-subtitle">
                        Gestisci le tue propriet√† in modo intelligente con la piattaforma all-in-one per host professionali
                    </p>
                    <div>
                        <span class="hero-badge">üè† Gestione Propriet√†</span>
                        <span class="hero-badge">üìä Analisi Dati</span>
                        <span class="hero-badge">ü§ñ Assistenza AI</span>
                        <span class="hero-badge">üí∞ Prezzi Dinamici</span>
                    </div>
                </div>
            """, unsafe_allow_html=True)
            
            # Search form con stile moderno
            st.markdown("""
                <style>
                    /* Modern search form styling */
                    .search-container {
                        background-color: white;
                        border-radius: 12px;
                        padding: 20px;
                        box-shadow: 0 8px 30px rgba(0,0,0,0.08);
                        margin-bottom: 2rem;
                        border: 1px solid rgba(0,0,0,0.05);
                    }
                    
                    .search-title {
                        font-size: 1.2rem;
                        font-weight: 600;
                        margin-bottom: 1.5rem;
                        color: #2d3748;
                        text-align: center;
                    }
                    
                    .search-button {
                        background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%);
                        color: white;
                        border: none;
                        border-radius: 8px;
                        padding: 12px 24px;
                        font-weight: 600;
                        width: 100%;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2);
                    }
                    
                    .search-button:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3);
                    }
                </style>
                
                <div class="search-container">
                    <h3 class="search-title">Cerca tra le tue propriet√†</h3>
                </div>
            """, unsafe_allow_html=True)
            
            # Form di ricerca con colonne
            search_col1, search_col2, search_col3 = st.columns([3, 2, 1])
            
            with search_col1:
                destination = st.text_input("Destinazione", placeholder="Inserisci citt√† o nome propriet√†", key="search_destination")
            
            with search_col2:
                dates = st.date_input("Periodo", value=[pd.to_datetime("today"), pd.to_datetime("today") + pd.Timedelta(days=7)], key="search_dates")
            
            with search_col3:
                guests = st.number_input("Ospiti", min_value=1, max_value=10, value=2, key="search_guests")
            
            # Pulsante di ricerca stilizzato
            if st.button("üîç Cerca Propriet√†", key="search_button", use_container_width=True):
                st.session_state.current_page = 'search_properties'
                st.rerun()
            
            # Featured properties section
            st.markdown("""
                <h2 style="font-size: 1.8rem; font-weight: 600; margin: 2rem 0 1.5rem 0; color: #212529;">
                    Alloggi in evidenza
                </h2>
            """, unsafe_allow_html=True)
            
            # Carica propriet√† reali dal database
            db_properties = list(st.session_state.get('properties', {}).values())
            
            # Se non ci sono propriet√† nel database, usa esempi di fallback
            if not db_properties:
                db_properties = [
                    {
                        "name": "Villa Paradiso Mare",
                        "location": "Costa Smeralda, Sardegna",
                        "price": 320,
                        "rating": 4.9,
                        "image": "https://images.unsplash.com/photo-1580587771525-78b9dba3b914?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"
                    },
                    {
                        "name": "Luxury Penthouse",
                        "location": "Centro Storico, Roma",
                        "price": 275,
                        "rating": 4.8,
                        "image": "https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"
                    },
                    {
                        "name": "Chalet Dolomiti",
                        "location": "Cortina d'Ampezzo, Veneto",
                        "price": 390,
                        "rating": 4.9,
                        "image": "https://images.unsplash.com/photo-1542718610-a1d656d1884c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"
                    },
                    {
                        "name": "Design Loft",
                        "location": "Navigli, Milano",
                        "price": 230,
                        "rating": 4.7,
                        "image": "https://images.unsplash.com/photo-1613545325278-f24b0cae1224?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"
                    },
                    {
                        "name": "Villa Toscana",
                        "location": "Val d'Orcia, Toscana",
                        "price": 295,
                        "rating": 4.8,
                        "image": "https://images.unsplash.com/photo-1599809275671-b5942cabc7a2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"
                    },
                    {
                        "name": "Attico Panoramico",
                        "location": "Posillipo, Napoli",
                        "price": 280,
                        "rating": 4.9,
                        "image": "https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"
                    }
                ]
            
            # Limita a massimo 6 propriet√† per il carousel
            featured_properties = db_properties[:6]
            
            # Aggiungi CSS per il carousel moderno
            st.markdown("""
                <style>
                /* Modern carousel styling */
                .carousel-container {
                    overflow-x: auto;
                    display: flex;
                    padding: 1.5rem 0;
                    scroll-behavior: smooth;
                    -webkit-overflow-scrolling: touch;
                    gap: 20px;
                }
                
                
                .carousel-container::-webkit-scrollbar {
                    height: 8px;
                }
                .carousel-container::-webkit-scrollbar-track {
                    background: #f0f4ff;
                    border-radius: 10px;
                }
                
                .carousel-container::-webkit-scrollbar-thumb {
                    background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%);
                    border-radius: 16px;
                }
                
                .carousel-item {
                    flex: 0 0 auto;
                    width: 340px;
                    background-color: white;
                    border-radius: 10px;
                    overflow: hidden;
                    box-shadow: 0 10px 25px rgba(0,0,0,0.08);
                    cursor: pointer;
                    transition: all 0.4s ease;
                    border: 1px solid rgba(0,0,0,0.05);
                }
                .carousel-item:hover {
                    transform: translateY(-10px);
                    box-shadow: 0 15px 35px rgba(67, 97, 238, 0.15);
                }
                
                .property-image {
                    height: 220px;
                    width: 100%;
                    object-fit: cover;
                    transition: transform 0.5s ease;
                }
                
                .carousel-item:hover .property-image {
                    transform: scale(1.05);
                }
                
                .property-info {
                    padding: 20px;
                }
                
                .property-name {
                    font-size: 1.2rem;
                    font-weight: 700;
                    color: #2d3748;
                    margin-bottom: 8px;
                }
                
                .property-location {
                    display: flex;
                    align-items: center;
                    font-size: 0.9rem;
                    color: #718096;
                    margin-bottom: 15px;
                }
                
                .property-location svg {
                    margin-right: 5px;
                    color: #4361ee;
                }
                
                .property-meta {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-top: 15px;
                }
                
                .property-price {
                    font-size: 1.3rem;
                    font-weight: 700;
                    color: #4361ee;
                }
                
                .property-price span {
                    font-size: 0.9rem;
                    font-weight: 400;
                    color: #718096;
                }
                
                .property-rating {
                    display: flex;
                    align-items: center;
                    background-color: #f0f4ff;
                    padding: 5px 10px;
                    border-radius: 50px;
                    font-weight: 600;
                    color: #4361ee;
                }
                
                .property-rating svg {
                    color: #f59e0b;
                    margin-right: 5px;
                }
                
                .property-badge {
                    position: absolute;
                    top: 15px;
                    right: 15px;
                    background: linear-gradient(90deg, #4361ee 0%, #3a56d4 100%);
                    color: white;
                    padding: 5px 12px;
                    border-radius: 50px;
                    font-size: 0.8rem;
                    font-weight: 600;
                    box-shadow: 0 4px 10px rgba(67, 97, 238, 0.3);
                }
                
                .carousel-section-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 1.5rem;
                }
                
                .section-title {
                    font-size: 1.8rem;
                    font-weight: 700;
                    color: #2d3748;
                    position: relative;
                    padding-left: 15px;
                }
                
                .section-title:before {
                    content: "";
                    position: absolute;
                    left: 0;
                    top: 0;
                    height: 100%;
                    width: 5px;
                    background: linear-gradient(180deg, #4361ee 0%, #3a56d4 100%);
                    border-radius: 10px;
                }
                
                .view-all-link {
                    color: #4361ee;
                    font-weight: 600;
                    text-decoration: none;
                    display: flex;
                    align-items: center;
                }
                
                .view-all-link svg {
                    margin-left: 5px;
                }
                </style>
            """, unsafe_allow_html=True)
            
            # Intestazione sezione propriet√† in evidenza
            st.markdown("""
                <div class="carousel-section-header">
                    <h2 class="section-title">Propriet√† in Evidenza</h2>
                </div>
                
                <div class="carousel-container" id="featured-carousel">
            """, unsafe_allow_html=True)
            
            # Creiamo le card delle propriet√† usando SOLO componenti Streamlit nativi
            st.subheader("Propriet√† in Evidenza")
            
            # Creiamo una riga di 3 colonne per le propriet√†
            prop_cols = st.columns(3)
            
            # Distribuiamo le propriet√† nelle colonne
            for i, prop in enumerate(featured_properties[:3]):
                with prop_cols[i % 3]:
                    # Assicurati che i campi necessari esistano
                    prop_name = prop.get('name', 'Propriet√†')
                    prop_location = prop.get('location', 'Italia')
                    prop_price = prop.get('price', 0)
                    prop_rating = prop.get('rating', 4.0)
                    prop_image = prop.get('image', "https://images.unsplash.com/photo-1566073771259-6a8506099945?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80")
                    
                    # Aggiungi badge "Superhost" casualmente ad alcune propriet√†
                    is_superhost = prop_rating >= 4.8
                    
                    # Usa componenti Streamlit nativi
                    st.image(prop_image, use_container_width=True)
                    if is_superhost:
                        st.success("Superhost")
                    
                    st.write(f"### {prop_name}")
                    st.write(f"üìç {prop_location}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write(f"**‚Ç¨{prop_price}** / notte")
                    with col2:
                        st.write(f"‚≠ê {prop_rating}")
                    
                    # Aggiungi un pulsante per vedere i dettagli
                    if st.button("Vedi dettagli", key=f"prop_btn_{i}", use_container_width=True):
                        st.session_state.current_page = 'search_properties'
                        st.rerun()
            """, unsafe_allow_html=True)
            st.markdown("""
                </div>
                
            
            
            # Pulsante per visualizzare tutte le propriet√†
            if st.button("Visualizza tutte le propriet√†", key="view_all_button", help="Visualizza tutte le propriet√†", use_container_width=True):
                st.session_state.current_page = 'search_properties'
                st.rerun()
            
            # Popular destinations section con stile moderno
            st.markdown("""
                <div class="carousel-section-header">
                    <h2 class="section-title">Destinazioni Popolari</h2>
                    <a href="#" class="view-all-link" onclick="document.getElementById('view_all_button').click()">
                        Esplora tutte
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M5 12h14"></path>
                            <path d="M12 5l7 7-7 7"></path>
                        </svg>
                    </a>
                </div>
                
                <style>
                    .destinations-grid {
                        display: grid;
                        grid-template-columns: repeat(4, 1fr);
                        gap: 20px;
                        margin-bottom: 2rem;
                    }
                    
                    .destination-card {
                        position: relative;
                        border-radius: 16px;
                        overflow: hidden;
                        height: 220px;
                        cursor: pointer;
                        box-shadow: 0 10px 25px rgba(0,0,0,0.08);
                        transition: all 0.4s ease;
                    }
                    
                    .destination-card:hover {
                        transform: translateY(-10px);
                        box-shadow: 0 15px 35px rgba(67, 97, 238, 0.15);
                    }
                    
                    .destination-image {
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                        transition: transform 0.5s ease;
                    }
                    
                    .destination-card:hover .destination-image {
                        transform: scale(1.05);
                    }
                    
                    .destination-overlay {
                        position: absolute;
                        bottom: 0;
                        left: 0;
                        right: 0;
                        padding: 1.5rem;
                        background: linear-gradient(transparent, rgba(0,0,0,0.7));
                    }
                    
                    .destination-name {
                        font-size: 1.3rem;
                        font-weight: 700;
                        margin: 0;
                        color: white;
                        text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                    }
                    
                    .destination-properties {
                        font-size: 0.9rem;
                        color: rgba(255,255,255,0.9);
                        margin-top: 5px;
                    }
                </style>
                
                <div class="destinations-grid">
            """, unsafe_allow_html=True)
            
            # Sample destinations con immagini migliori
            destinations = [
                {"name": "Roma", "properties": "245 propriet√†", "image": "https://images.unsplash.com/photo-1555992828-ca4dbe41d294?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"},
                {"name": "Firenze", "properties": "189 propriet√†", "image": "https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"},
                {"name": "Venezia", "properties": "210 propriet√†", "image": "https://images.unsplash.com/photo-1523906834658-6e24ef2386f9?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"},
                {"name": "Milano", "properties": "276 propriet√†", "image": "https://images.unsplash.com/photo-1574155376612-bfa4ed8aabfd?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"}
            ]
            
            # Funzione per gestire il click su una destinazione
            def handle_destination_click(destination):
                # Salviamo la destinazione in una variabile di sessione diversa
                st.session_state.destination_selected = destination
                st.session_state.current_page = 'search_properties'
                st.rerun()
            
            # Creiamo le card delle destinazioni usando SOLO componenti Streamlit nativi
            st.subheader("Destinazioni Popolari")
            
            # Aggiungiamo CSS per lo zoom delle immagini al passaggio del mouse
            st.markdown("""
            <style>
                .zoom-effect {
                    overflow: hidden;
                    border-radius: 10px;
                    margin-bottom: 10px;
                }
                .zoom-effect img {
                    transition: transform 0.5s ease;
                    width: 100%;
                    height: 200px;
                    object-fit: cover;
                }
                .zoom-effect:hover img {
                    transform: scale(1.1);
                }
            </style>
            """, unsafe_allow_html=True)
            
            # Aggiorniamo le immagini delle destinazioni per avere tutte lo stesso formato
            destinations_images = {
                "Roma": "https://images.unsplash.com/photo-1552832230-c0197dd311b5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80",
                "Firenze": "https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80",
                "Venezia": "https://images.unsplash.com/photo-1514890547357-a9ee288728e0?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80",
                "Milano": "https://images.unsplash.com/photo-1513581166391-887a96ddeafd?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80"
            }
            
            # Creiamo una riga di 4 colonne per le destinazioni
            dest_cols = st.columns(4)
            
            # Distribuiamo le destinazioni nelle colonne
            for i, dest in enumerate(destinations):
                with dest_cols[i % 4]:
                    # Usa l'immagine aggiornata se disponibile
                    image_url = destinations_images.get(dest['name'], dest['image'])
                    
                    # Usa componenti Streamlit nativi con effetto zoom
                    st.markdown(f"""
                    <div class="zoom-effect">
                        <img src="{image_url}" alt="{dest['name']}">
                    </div>
                    """, unsafe_allow_html=True)
                    
                    st.write(f"### {dest['name']}")
                    st.write(f"{dest['properties']}")
                    
                    # Aggiungi un pulsante per vedere le propriet√† in questa destinazione
                    if st.button(f"Esplora {dest['name']}", key=f"dest_btn_{dest['name']}", use_container_width=True):
                        handle_destination_click(dest['name'])
            
            # Why choose us section con stile moderno
            st.subheader("Perch√© scegliere CiaoHost")
            
            # Creiamo una riga di 3 colonne per le caratteristiche
            feature_cols = st.columns(3)
            
            # Definizione delle caratteristiche
            features = [
                {
                    "icon": "‚≠ê",
                    "title": "Alloggi Selezionati",
                    "description": "Solo le migliori strutture, verificate e certificate dal nostro team di esperti per garantirti un soggiorno perfetto."
                },
                {
                    "icon": "üí∞",
                    "title": "Prezzi Dinamici",
                    "description": "Algoritmi avanzati che ottimizzano i prezzi in tempo reale in base alla domanda, stagionalit√† ed eventi locali."
                },
                {
                    "icon": "üõéÔ∏è",
                    "title": "Assistenza 24/7",
                    "description": "Supporto clienti disponibile 24 ore su 24, 7 giorni su 7, in italiano e in inglese per risolvere qualsiasi problema."
                }
            ]
            
            # Distribuiamo le caratteristiche nelle colonne
            for i, feature in enumerate(features):
                with feature_cols[i]:
                    st.write(f"## {feature['icon']}")
                    st.write(f"### {feature['title']}")
                    st.write(feature['description'])
            
            # Sezione recensioni con foto profilo
            st.subheader("Cosa dicono i nostri clienti")
            
            # Definiamo le recensioni con foto profilo
            reviews = [
                {
                    "name": "Marco Rossi",
                    "photo": "https://randomuser.me/api/portraits/men/32.jpg",
                    "rating": 5,
                    "text": "Grazie a CiaoHost ho aumentato le prenotazioni del 40% in soli due mesi. Il sistema di prezzi dinamici √® fantastico!",
                    "location": "Roma"
                },
                {
                    "name": "Laura Bianchi",
                    "photo": "https://randomuser.me/api/portraits/women/44.jpg",
                    "rating": 5,
                    "text": "Finalmente posso gestire tutte le mie propriet√† da un'unica piattaforma. Servizio clienti eccellente e sempre disponibile.",
                    "location": "Milano"
                },
                {
                    "name": "Alessandro Verdi",
                    "photo": "https://randomuser.me/api/portraits/men/67.jpg",
                    "rating": 4,
                    "text": "La gestione delle pulizie automatizzata mi ha fatto risparmiare tempo e denaro. Consigliato a tutti gli host!",
                    "location": "Firenze"
                }
            ]
            
            # Creiamo una riga di 3 colonne per le recensioni
            review_cols = st.columns(3)
            
            # Aggiungiamo stile CSS per le recensioni
            st.markdown("""
            <style>
                .review-card {
                    background-color: white;
                    border-radius: 10px;
                    padding: 20px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
                    margin-bottom: 20px;
                }
                
                .review-header {
                    display: flex;
                    align-items: center;
                    margin-bottom: 15px;
                }
                
                .review-photo {
                    width: 50px;
                    height: 50px;
                    border-radius: 50%;
                    object-fit: cover;
                    margin-right: 15px;
                }
                
                .review-name {
                    font-weight: 600;
                    margin: 0;
                    font-size: 16px;
                }
                
                .review-location {
                    color: #6c757d;
                    font-size: 14px;
                    margin: 0;
                }
                
                .review-stars {
                    color: #f59e0b;
                    margin-bottom: 10px;
                }
                
                .review-text {
                    font-size: 15px;
                    line-height: 1.6;
                    color: #4a5568;
                }
            </style>
            """, unsafe_allow_html=True)
            
            # Distribuiamo le recensioni nelle colonne
            for i, review in enumerate(reviews):
                with review_cols[i]:
                    st.markdown(f"""
                    <div class="review-card">
                        <div class="review-header">
                            <img src="{review['photo']}" class="review-photo" alt="{review['name']}">
                            <div>
                                <p class="review-name">{review['name']}</p>
                                <p class="review-location">{review['location']}</p>
                            </div>
                        </div>
                        <div class="review-stars">{"‚òÖ" * review['rating'] + "‚òÜ" * (5 - review['rating'])}</div>
                        <p class="review-text">"{review['text']}"</p>
                    </div>
                    """, unsafe_allow_html=True)
            
            # Host section con stile moderno
            st.subheader("Sei un proprietario di immobili?")
            
            # Creiamo due colonne per il contenuto e l'immagine
            host_col1, host_col2 = st.columns(2)
            
            with host_col1:
                # Usa un container con sfondo colorato
                with st.container():
                    st.write("### Unisciti a CiaoHost")
                    st.write("Trasforma la gestione delle tue propriet√† con strumenti professionali e intelligenza artificiale.")
                    
                    st.write("‚úì Prezzi ottimizzati")
                    st.write("‚úì Gestione semplificata")
                    st.write("‚úì Maggiore visibilit√†")
                
                if st.button("Inizia ora", key="host_cta_btn", use_container_width=True):
                    st.session_state.current_page = 'subscriptions'
                    st.rerun()
            
            with host_col2:
                st.image("https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1350&q=80", 
                         caption="Diventa un host con CiaoHost", 
                         use_container_width=True)
            
            # Bottoni per i piani di abbonamento
            host_btn_col1, host_btn_col2 = st.columns(2)
            
            with host_btn_col1:
                if st.button("üöÄ Scopri i nostri piani", key="host_discover_plans", use_container_width=True):
                    st.session_state.current_page = 'subscriptions'
                    st.rerun()
            
            with host_btn_col2:
                if st.button("üè† Registra la tua struttura", key="host_register_property", use_container_width=True):
                    st.session_state.current_page = 'subscriptions'
                    st.rerun()
            
            # Testimonials section
            st.markdown("""
                <h2 style="font-size: 1.8rem; font-weight: 600; margin: 2.5rem 0 1.5rem 0; text-align: center; color: #212529;">
                    Cosa dicono i nostri clienti
                </h2>
            """, unsafe_allow_html=True)
            
            # Testimonials grid
            test_col1, test_col2, test_col3 = st.columns(3)
            
            with test_col1:
                st.markdown("""
                    <div style="background-color: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">
                        <div style="font-size: 1.2rem; color: #ffc107; margin-bottom: 1rem;">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
                        <p style="font-size: 0.9rem; color: #212529; margin-bottom: 1rem; font-style: italic;">
                            "Esperienza fantastica! L'appartamento era esattamente come nelle foto, pulito e in una posizione perfetta. Il check-in √® stato semplice e l'host sempre disponibile."
                        </p>
                        <div style="display: flex; align-items: center;">
                            <div style="width: 40px; height: 40px; border-radius: 50%; background-color: #f1f3f9; margin-right: 0.5rem;"></div>
                            <div>
                                <p style="margin: 0; font-weight: 600;">Marco R.</p>
                                <p style="margin: 0; font-size: 0.8rem; color: #6c757d;">Roma, Italia</p>
                            </div>
                        </div>
                    </div>
                """, unsafe_allow_html=True)
            
            with test_col2:
                st.markdown("""
                    <div style="background-color: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">
                        <div style="font-size: 1.2rem; color: #ffc107; margin-bottom: 1rem;">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
                        <p style="font-size: 0.9rem; color: #212529; margin-bottom: 1rem; font-style: italic;">
                            "Prenotazione semplice e veloce. La villa era stupenda, con una vista mozzafiato sul mare. Torneremo sicuramente per le prossime vacanze!"
                        </p>
                        <div style="display: flex; align-items: center;">
                            <div style="width: 40px; height: 40px; border-radius: 50%; background-color: #f1f3f9; margin-right: 0.5rem;"></div>
                            <div>
                                <p style="margin: 0; font-weight: 600;">Laura B.</p>
                                <p style="margin: 0; font-size: 0.8rem; color: #6c757d;">Milano, Italia</p>
                            </div>
                        </div>
                    </div>
                """, unsafe_allow_html=True)
            
            with test_col3:
                st.markdown("""
                    <div style="background-color: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05);">
                        <div style="font-size: 1.2rem; color: #ffc107; margin-bottom: 1rem;">‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ</div>
                        <p style="font-size: 0.9rem; color: #212529; margin-bottom: 1rem; font-style: italic;">
                            "Servizio impeccabile! L'assistenza clienti √® stata pronta a risolvere un piccolo problema con il riscaldamento. Consiglio vivamente CiaoHost."
                        </p>
                        <div style="display: flex; align-items: center;">
                            <div style="width: 40px; height: 40px; border-radius: 50%; background-color: #f1f3f9; margin-right: 0.5rem;"></div>
                            <div>
                                <p style="margin: 0; font-weight: 600;">Giovanni T.</p>
                                <p style="margin: 0; font-size: 0.8rem; color: #6c757d;">Napoli, Italia</p>
                            </div>
                        </div>
                    </div>
                """, unsafe_allow_html=True)
            
            # Newsletter section
            st.markdown("""
                <div style="background-color: #e6effd; padding: 2rem; border-radius: 10px; margin: 2.5rem 0; text-align: center;">
                    <h2 style="font-size: 1.8rem; font-weight: 600; margin-bottom: 1rem; color: #0056b3;">
                        Resta aggiornato sulle nostre offerte
                    </h2>
                    <p style="font-size: 1.1rem; color: #212529; margin-bottom: 1.5rem; max-width: 600px; margin-left: auto; margin-right: auto;">
                        Iscriviti alla nostra newsletter per ricevere offerte esclusive e suggerimenti per i tuoi prossimi viaggi
                    </p>
                </div>
            """, unsafe_allow_html=True)
            
            # Newsletter form
            newsletter_col1, newsletter_col2 = st.columns([3, 1])
            
            with newsletter_col1:
                st.text_input("La tua email", placeholder="Inserisci la tua email", key="newsletter_email")
            
            with newsletter_col2:
                st.button("Iscriviti", key="newsletter_submit", use_container_width=True)
            
            # User-specific section (only if logged in)
            if st.session_state.get('is_authenticated', False):
                user_name = st.session_state.get('current_user_email', 'Utente').split('@')[0]
                
                # Host dashboard link (SOLO se abbonato)
                if st.session_state.get('subscription_purchased', False):
                    st.markdown("""
                        <div style="background-color: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); margin: 2.5rem 0;">
                            <h3 style="font-size: 1.4rem; font-weight: 600; margin-bottom: 1rem; color: #0056b3;">
                                Area Host
                            </h3>
                            <p style="font-size: 1rem; color: #212529; margin-bottom: 1rem;">
                                Accedi alla tua dashboard per gestire i tuoi immobili, visualizzare le prenotazioni e molto altro.
                            </p>
                        </div>
                    """, unsafe_allow_html=True)
                    
                    # Host dashboard buttons
                    host_col1, host_col2, host_col3, host_col4 = st.columns(4)
                    
                    with host_col1:
                        if st.button("üìä Dashboard", key="host_dashboard", use_container_width=True):
                            st.session_state.current_page = 'dashboard'
                            st.rerun()
                    
                    with host_col2:
                        if st.button("üèòÔ∏è Gestione Propriet√†", key="host_properties", use_container_width=True):
                            st.session_state.current_page = 'property_management'
                            st.rerun()
                    
                    with host_col3:
                        if st.button("‚öñÔ∏è Prezzi Dinamici", key="host_pricing", use_container_width=True):
                            st.session_state.current_page = 'dynamic_pricing'
                            st.rerun()
                    
                    with host_col4:
                        if st.button("üßπ Gestione Pulizie", key="host_cleaning", use_container_width=True):
                            st.session_state.current_page = 'cleaning_management'
                            st.rerun()
                else:
                    # Sezione per utenti autenticati ma non abbonati
                    st.markdown(f"""
                        <div style="background-color: white; padding: 1.5rem; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); margin: 2.5rem 0;">
                            <h3 style="font-size: 1.4rem; font-weight: 600; margin-bottom: 1rem; color: #0056b3;">
                                Ciao {user_name}, vuoi diventare un host?
                            </h3>
                            <p style="font-size: 1rem; color: #212529; margin-bottom: 1rem;">
                                Sblocca tutte le funzionalit√† premium per gestire i tuoi immobili in modo professionale.
                            </p>
                        </div>
                    """, unsafe_allow_html=True)
                    
                    if st.button("üöÄ Scopri i Piani di Abbonamento", key="home_cta_plans", use_container_width=True):
                        st.session_state.current_page = 'subscriptions'
                        st.rerun()

        elif st.session_state.current_page == 'search_properties':
            show_property_search()
        elif st.session_state.current_page == 'subscriptions':
            show_subscription_plans()
        elif st.session_state.current_page == 'dashboard':
            # Assicuriamoci che l'abbonamento sia attivo
            if 'subscription_purchased' not in st.session_state:
                st.session_state.subscription_purchased = True
            show_dashboard()
        elif st.session_state.current_page == 'ai':
            st.header("ü§ñ Chatta con CiaoHost AI")
            st.caption("Puoi chiedere informazioni e assistenza.")
            
            chat_container = st.container()
            with chat_container:
                for message in st.session_state.get('messages', []):
                    role = message["role"]
                    content = message["content"]
                    avatar_map = {"user": "üë§", "bot": "ü§ñ", "admin": "‚öôÔ∏è"}
                    
                    with st.chat_message(name=role, avatar=avatar_map.get(role)):
                        st.markdown(content)
            
            user_input = st.chat_input("Scrivi il tuo messaggio...", key="chat_input")
            if user_input:
                st.session_state.messages.append({"role": "user", "content": user_input})
                
                admin_response = handle_admin_access(user_input)
                if admin_response:
                    st.session_state.messages.append({"role": "admin", "content": admin_response})
                else:
                    if not (st.session_state.admin_state and st.session_state.admin_state.get('mode') == 'auth'):
                        if model:
                            try:
                                property_summary = "Nessuna propriet√† nel database."
                                if st.session_state.properties:
                                    prop_count = len(st.session_state.properties)
                                    property_summary = f"{prop_count} propriet√† nel database:\n"
                                    for prop_id, prop in st.session_state.properties.items():
                                        prop_name = prop.get('name', 'N/A')
                                        prop_type = prop.get('type', 'N/A')
                                        prop_location = prop.get('location', 'N/A')
                                        property_summary += f"- ID {prop_id}: {prop_name} ({prop_type}) a {prop_location}\n"
                                
                                conversation_history = []
                                for msg in st.session_state.messages[-10:]:
                                    gemini_role = "user" if msg["role"] == "user" else "model"
                                    conversation_history.append({"role": gemini_role, "parts": [{"text": msg["content"]}]})
                            
                                if conversation_history and conversation_history[-1]["role"] == "user":
                                    current_prompt_text = conversation_history.pop()["parts"][0]["text"]
                                else:
                                    current_prompt_text = user_input

                                final_prompt = f"{CONTESTO_IMMOBILIARE}\n\n{property_summary}\n\n{current_prompt_text}"
                                response = model.generate_content([{"role": "user", "parts": [{"text": final_prompt}]}])
                                bot_reply = response.text
                            except Exception as e:
                                bot_reply = f"ü§ñ Scusa, ho riscontrato un errore: {str(e)}"
                        else:
                            bot_reply = "ü§ñ Il modello AI non √® disponibile al momento."
                        
                        st.session_state.messages.append({"role": "bot", "content": bot_reply})
                
                st.rerun()
        elif st.session_state.current_page == 'cleaning_management':
            show_cleaning_management_page()
        elif st.session_state.current_page == 'dynamic_pricing':
            show_dynamic_pricing_page()
        elif st.session_state.current_page == 'fiscal_management':
            show_fiscal_management_page()
        elif st.session_state.current_page == 'property_management':
            show_property_management_page()
        elif st.session_state.current_page == 'report_builder':
            show_report_builder_page()
        elif st.session_state.current_page == 'settings':
            show_settings_page()
        else:
            # Fallback for any unknown page state
            valid_pages = [
                'home', 'search_properties', 'subscriptions', 'dashboard', 'ai', 'login',
                'cleaning_management', 'dashboard_creator', 'data_insights',
                'dynamic_pricing', 'fiscal_management', 'property_management',
                'report_builder', 'settings'
            ]
            if st.session_state.current_page not in valid_pages:
                 st.error(f"Pagina '{st.session_state.current_page}' non trovata o non implementata.")
                 # Optionally, redirect to home:
                 # st.session_state.current_page = 'home'
                 # st.rerun()

if __name__ == "__main__":
    main()
